{"version":3,"sources":["components/ASTreeViewer/style.scss","components/BabelSettings/components/Tags.module.scss","components/BabelSettings/components/DrawerFooter.module.scss","utils/babel/versions/7.0.0/index.js","utils/babel/versions/7.1.0/index.js","utils/babel/versions/7.2.0/index.js","utils/babel/versions/7.2.2/index.js","utils/babel/versions/7.2.3/index.js","utils/babel/versions/7.2.4/index.js","utils/babel/versions/7.2.5/index.js","utils/babel/versions/7.3.0/index.js","utils/babel/versions/7.3.1/index.js","utils/babel/versions/7.3.2/index.js","utils/babel/versions/7.3.3/index.js","utils/babel/versions/7.3.4/index.js","utils/babel/versions/7.4.0/index.js","utils/babel/versions/7.4.1/index.js","utils/babel/versions/7.4.2/index.js","utils/babel/versions/7.4.3/index.js","utils/babel/versions/7.4.4/index.js","utils/babel/versions/7.4.5/index.js","utils/babel/versions/7.5.0/index.js","utils/babel/versions/7.5.1/index.js","utils/babel/versions/7.5.2/index.js","utils/babel/versions/7.5.3/index.js","utils/babel/versions/7.5.4/index.js","utils/babel/versions/7.5.5/index.js","utils/babel/versions/7.6.0/index.js","utils/babel/definitions/utils.js","utils/babel/definitions/core.js","utils/babel/definitions/es2015.js","utils/babel/definitions/flow.js","utils/babel/definitions/jsx.js","utils/babel/definitions/experimental.js","utils/babel/definitions/typescript.js","utils/babel/definitions/index.js","utils/babel/codegen.js","utils/babel/parser.js","utils/babel/index.js","utils/url/index.js","components/ASTreeViewer/index.js","components/BabelSettings/utils.js","components/BabelSettings/components/Tags.js","components/BabelSettings/components/DrawerFooter.js","utils/file.js","components/BabelSettings/index.js","App.js","serviceWorker.js","index.js","App.scss","components/BabelSettings/style.module.scss","utils/babel/versions/versions.js"],"names":["module","exports","nodeType","key","expandableKey","preview","colon","number","string","null","boolean","value","child","hidden","expandToggle","bracket","options","footer","footerItem","footerItemPath","highlighted","tooltipText","treeContainer","container","require","BUILDER_KEYS","assertOneOf","defineType","type","opts","arguments","length","undefined","inherits","store","builder","visitor","fields","elements","validate","chain","default","aliases","operator","assertValueType","left","assertNodeType","right","apply","directives","body","label","optional","callee","typeArguments","typeParameters","param","test","consequent","alternate","expression","program","init","update","functionCommon","params","generator","async","functionTypeAnnotationCommon","returnType","functionDeclarationCommon","Object","objectSpread","declare","id","patternLikeCommon","typeAnnotation","decorators","name","deprecatedAlias","pattern","flags","object","property","node","val","computed","sourceFile","sourceType","interpreter","properties","kind","shorthand","argument","expressions","discriminant","cases","block","handler","finalizer","prefix","declarations","definite","classCommon","superClass","superTypeParameters","implements","abstract","source","declaration","specifiers","exportKind","validateOptional","local","exported","await","importKind","imported","meta","classMethodOrPropertyCommon","accessibility","static","classMethodOrDeclareMethodCommon","access","tag","quasi","tail","quasis","delegate","defineInterfaceishType","validateType","validateOptionalType","extends","mixins","elementType","predicate","supertype","rest","types","indexers","callProperties","internalSlots","exact","inexact","method","variance","proto","impltype","qualification","bound","openingElement","closingElement","children","namespace","selfClosing","attributes","openingFragment","closingFragment","readonly","tSFunctionTypeAnnotationCommon","parameter","signatureDeclarationCommon","parameters","validateArrayOfType","callConstructSignatureDeclaration","namedTypeElementCommon","initializer","_i","_tsKeywordTypes","fnOrCtr","typeName","parameterName","exprName","members","elementTypes","unionOrIntersection","checkType","extendsType","trueType","falseType","typeParameter","objectType","indexType","literal","const","global","qualifier","isExport","moduleReference","constraint","isNodeType","parse","code","_ref","customParser","_ref$pluginOptions","pluginOptions","_ref$version","version","Promise","resolve","plugins","pushToPlugins","getBabel","then","babel","transform","ast","manipulateOptions","parserOpts","parserOption","option","enabled","push","babelScripts","_callee","babelScriptsUrl","response","script","regenerator_default","a","wrap","_context","prev","next","abrupt","fetch","sent","text","Function","Babel","stop","babelVersions","keys","versions","useQueryParams","state","useEffect","obj","window","history","replaceState","btoa","unescape","encodeURIComponent","JSON","stringify","values","ASTContext","React","createContext","hideEmpty","hideLocation","hideType","astStateReducer","action","defineProperty","MarkerContext","SelectedNodeContext","memo","data","setMarker","selectedNode","selectedNodePath","treeSettings","toggleTreeSettings","react_default","createElement","Provider","className","styles","es_checkbox","checked","onChange","JSONObject","root","map","path","i","FooterItem","onMouseOver","loc","onMouseLeave","getComponent","Array","isArray","JSONArray","JSONNull","JSONNumber","JSONString","JSONBoolean","JSONUnknown","_ref2","_ref3","_ref4","expand","onToggleExpand","_useState","useState","_useState2","slicedToArray","rootExpand","setRootExpand","toggleRootExpand","_","shouldExpand","toggleExpand","astState","useContext","copyable","generateBabelTypeCode","definitions","camelCaseType","toLowerCase","slice","args","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","Symbol","iterator","done","argValue","item","join","err","return","concat","Fragment","ExpandToggle","tooltip","title","typography","Text","trigger","onClick","cx","openingBracket","PreviewObject","includes","JSONItem","_ref5","_useState3","_useState4","setExpand","Component","isExpandable","isSelected","Highlightable","event","stopPropagation","_ref6","_ref7","PreviewArray","datum","idx","_ref8","_ref9","_ref10","_ref11","ref","useRef","current","scrollIntoView","useHighlight","_ref12","keyPath","urlParamsStateToInitialState","initialStateFromUrlParams","BABEL_CONFIG_MAP","hasOptionsMap","reduce","getOptionSettings","settings","enabledSettings","filter","setting","DrawerFooter","href","rel","target","readFile","file","reject","reader","FileReader","onload","result","onerror","error","readAsText","content","_exports","babelSettingsReducer","updatedOption","forEach","optionValue","onChangeSettings","opened","setOpened","closeDrawer","useCallback","openDrawer","topbar","es_button","shape","icon","size","components_Tags","drawer","placement","closable","onClose","visible","width","theme","es_select","BABEL_VERSIONS","Option","upload","style","marginLeft","headers","authorization","showUploadList","beforeUpload","_x","_getExportsFromFile","this","getExportsFromFile","parser","selectedValue","disabled","urlState","query","decodeURIComponent","escape","atob","replace","e","parseQueryParams","document","location","hash","initialBabelSettings","babelSettings","initialCode","initialTreeSettings","EMPTY_AST","App","defaultSettings","_useBabelSettings","useReducer","_useBabelSettings2","updateBabelSettings","console","log","_useTreeSettings","_useTreeSettings2","_useBabel","babelOptions","setValue","setError","_useState5","_useState6","setAst","onCodeChange","debouncedValue","useDebounce","debouncedOptions","cancel","catch","useBabel","_useBabel2","_useMarker","_useState9","_useState10","marker","setMarkerAt","start","end","startRow","line","startCol","column","endRow","endCol","useMarker","_useMarker2","_useCursor","_useState11","_useState12","cursor","setCursor","_useState13","_useState14","selectedAst","setSelectedAst","_useState15","_useState16","selectedAstPath","setSelectedAstPath","onCursorChange","selection","selectionLead","row","_search","stack","nodePath","keyPathSoFar","pop","isNode","isInRange","search","useCursor","_useCursor2","codeContainer","codeToolbar","components_BabelSettings","lib_default","mode","height","showPrintMargin","editorProps","$blockScrolling","setOptions","useWorker","markers","astContainer","toString","spin","ASTreeViewer","delay","_useState7","_useState8","debounceValue","setDebounceValue","setTimeout","clearTimeout","_cursor","Boolean","hostname","match","ReactDOM","render","src_App","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.653d70e5.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"nodeType\":\"_1r46sXWciHKS0YO_YvmQ47\",\"key\":\"_17Au7TC6qyGwgV596KDwEb\",\"expandableKey\":\"_29fRAq6gAA1bjN8ByrfX1y\",\"preview\":\"_1n-DNYdPo9f_oWWTbL6Vk_\",\"colon\":\"_1RAtdlaYdI-X6JBSTfT_Mi\",\"number\":\"_3VAHQrojc2ZK9zvQAK0BZn\",\"string\":\"_1qZv2ytJ9QApPyW12dMurK\",\"null\":\"_1l1Eo7GOvH5kBk5VNoxFSt\",\"boolean\":\"_3k1T6qt_wVUPBY70JA0LEW\",\"value\":\"_3oXvvKKsew2dNC3e88n2aC\",\"child\":\"_1BVWBX-EzMRmI63_FTkxcR\",\"hidden\":\"_37e-5Jz3QKQaX-JJxWjM82\",\"expandToggle\":\"_2PNmbokB1iPZvX3FxVyNu2\",\"bracket\":\"_1_bMU1YmHJJMAt-OkSzfR5\",\"options\":\"_2OWKpKRMjkCKvgB58qpAr1\",\"footer\":\"_2PoBnyV2Eybs5kZ74qvcNH\",\"footerItem\":\"_3c1yiE4aqARnrwmtf3Qq2A\",\"footerItemPath\":\"rZnXLnCgwPj8Hq72BuvYN\",\"highlighted\":\"_3T06bc2YEjWenk23leJe8y\",\"tooltipText\":\"_33epfuk_M2FAh4L0-a07M_\",\"treeContainer\":\"_2wg6Sc8ebkPTWmqb2PO55B\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Tags_container__1O1yT\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"footer\":\"DrawerFooter_footer__1MmEy\"};","/* eslint-disable import/no-webpack-loader-syntax */\n\n  module.exports = require('file-loader!@babel/standalone');","/* eslint-disable import/no-webpack-loader-syntax */\n\n  module.exports = require('file-loader!@babel/standalone');","/* eslint-disable import/no-webpack-loader-syntax */\n\n  module.exports = require('file-loader!@babel/standalone');","/* eslint-disable import/no-webpack-loader-syntax */\n\n  module.exports = require('file-loader!@babel/standalone');","/* eslint-disable import/no-webpack-loader-syntax */\n\n  module.exports = require('file-loader!@babel/standalone');","/* eslint-disable import/no-webpack-loader-syntax */\n\n  module.exports = require('file-loader!@babel/standalone');","/* eslint-disable import/no-webpack-loader-syntax */\n\n  module.exports = require('file-loader!@babel/standalone');","/* eslint-disable import/no-webpack-loader-syntax */\n\n  module.exports = require('file-loader!@babel/standalone');","/* eslint-disable import/no-webpack-loader-syntax */\n\n  module.exports = require('file-loader!@babel/standalone');","/* eslint-disable import/no-webpack-loader-syntax */\n\n  module.exports = require('file-loader!@babel/standalone');","/* eslint-disable import/no-webpack-loader-syntax */\n\n  module.exports = require('file-loader!@babel/standalone');","/* eslint-disable import/no-webpack-loader-syntax */\n\n  module.exports = require('file-loader!@babel/standalone');","/* eslint-disable import/no-webpack-loader-syntax */\n\n  module.exports = require('file-loader!@babel/standalone/babel.min.js');","/* eslint-disable import/no-webpack-loader-syntax */\n\nmodule.exports = require('file-loader!@babel/standalone/babel.min.js');\n","/* eslint-disable import/no-webpack-loader-syntax */\n\n  module.exports = require('file-loader!@babel/standalone/babel.min.js');","/* eslint-disable import/no-webpack-loader-syntax */\n\nmodule.exports = require('file-loader!@babel/standalone/babel.min.js');\n","/* eslint-disable import/no-webpack-loader-syntax */\n\nmodule.exports = require('file-loader!@babel/standalone/babel.min.js');\n","/* eslint-disable import/no-webpack-loader-syntax */\n\nmodule.exports = require('file-loader!@babel/standalone/babel.min.js');\n","/* eslint-disable import/no-webpack-loader-syntax */\n\nmodule.exports = require('file-loader!@babel/standalone/babel.min.js');\n","/* eslint-disable import/no-webpack-loader-syntax */\n\nmodule.exports = require('file-loader!@babel/standalone/babel.min.js');\n","/* eslint-disable import/no-webpack-loader-syntax */\n\nmodule.exports = require('file-loader!@babel/standalone/babel.min.js');\n","/* eslint-disable import/no-webpack-loader-syntax */\n\nmodule.exports = require('file-loader!@babel/standalone/babel.min.js');\n","/* eslint-disable import/no-webpack-loader-syntax */\n\nmodule.exports = require('file-loader!@babel/standalone/babel.min.js');\n","/* eslint-disable import/no-webpack-loader-syntax */\n\nmodule.exports = require('file-loader!@babel/standalone/babel.min.js');\n","/* eslint-disable import/no-webpack-loader-syntax */\n\nmodule.exports = require('file-loader!@babel/standalone/babel.min.js');\n","// @flow\nexport const BUILDER_KEYS: { [string]: Array<string> } = {};\n\nexport function validate() {}\nexport function typeIs() {}\nexport function validateType() {}\nexport function validateOptional() {}\nexport function validateOptionalType() {}\nexport function arrayOf() {}\nexport function arrayOfType() {}\nexport function validateArrayOfType() {}\nexport function assertEach() {}\nexport function assertOneOf() {}\nexport function assertNodeType() {}\nexport function assertNodeOrValueType() {}\nexport function assertValueType() {}\nexport function chain() {}\n\nexport default function defineType(\n  type: string,\n  opts: {\n    visitor?: Array<string>,\n    builder?: Array<string>,\n    inherits?: string,\n  } = {}\n) {\n  const inherits = (opts.inherits && store[opts.inherits]) || {};\n  const builder: Array<string> =\n    opts.builder || inherits.builder || opts.visitor || [];\n\n  BUILDER_KEYS[type] = opts.builder = builder;\n  store[type] = opts;\n}\n\nconst store = {};\n","// @flow\n\nimport defineType, {\n  assertNodeType,\n  assertValueType,\n  chain,\n  assertEach,\n  assertOneOf,\n  assertNodeOrValueType,\n} from \"./utils\";\n\nconst noop = () => {};\n\nconst isValidIdentifier = noop;\n\nconst BINARY_OPERATORS = [];\nconst LOGICAL_OPERATORS = [];\nconst UNARY_OPERATORS = [];\nconst UPDATE_OPERATORS = [];\n\ndefineType('ArrayExpression', {\n  fields: {\n    elements: {\n      validate: chain(\n        assertValueType('array'),\n        assertEach(assertNodeOrValueType('null', 'Expression', 'SpreadElement'))\n      ),\n      default: [],\n    },\n  },\n  visitor: ['elements'],\n  aliases: ['Expression'],\n});\n\ndefineType('AssignmentExpression', {\n  fields: {\n    operator: {\n      validate: assertValueType('string'),\n    },\n    left: {\n      validate: assertNodeType('LVal'),\n    },\n    right: {\n      validate: assertNodeType('Expression'),\n    },\n  },\n  builder: ['operator', 'left', 'right'],\n  visitor: ['left', 'right'],\n  aliases: ['Expression'],\n});\n\ndefineType('BinaryExpression', {\n  builder: ['operator', 'left', 'right'],\n  fields: {\n    operator: {\n      validate: assertOneOf(...BINARY_OPERATORS),\n    },\n    left: {\n      validate: assertNodeType('Expression'),\n    },\n    right: {\n      validate: assertNodeType('Expression'),\n    },\n  },\n  visitor: ['left', 'right'],\n  aliases: ['Binary', 'Expression'],\n});\n\ndefineType('InterpreterDirective', {\n  builder: ['value'],\n  fields: {\n    value: {\n      validate: assertValueType('string'),\n    },\n  },\n});\n\ndefineType('Directive', {\n  visitor: ['value'],\n  fields: {\n    value: {\n      validate: assertNodeType('DirectiveLiteral'),\n    },\n  },\n});\n\ndefineType('DirectiveLiteral', {\n  builder: ['value'],\n  fields: {\n    value: {\n      validate: assertValueType('string'),\n    },\n  },\n});\n\ndefineType('BlockStatement', {\n  builder: ['body', 'directives'],\n  visitor: ['directives', 'body'],\n  fields: {\n    directives: {\n      validate: chain(\n        assertValueType('array'),\n        assertEach(assertNodeType('Directive'))\n      ),\n      default: [],\n    },\n    body: {\n      validate: chain(\n        assertValueType('array'),\n        assertEach(assertNodeType('Statement'))\n      ),\n    },\n  },\n  aliases: ['Scopable', 'BlockParent', 'Block', 'Statement'],\n});\n\ndefineType('BreakStatement', {\n  visitor: ['label'],\n  fields: {\n    label: {\n      validate: assertNodeType('Identifier'),\n      optional: true,\n    },\n  },\n  aliases: ['Statement', 'Terminatorless', 'CompletionStatement'],\n});\n\ndefineType('CallExpression', {\n  visitor: ['callee', 'arguments', 'typeParameters', 'typeArguments'],\n  builder: ['callee', 'arguments'],\n  aliases: ['Expression'],\n  fields: {\n    callee: {\n      validate: assertNodeType('Expression'),\n    },\n    arguments: {\n      validate: chain(\n        assertValueType('array'),\n        assertEach(\n          assertNodeType(\n            'Expression',\n            'SpreadElement',\n            'JSXNamespacedName',\n            'ArgumentPlaceholder'\n          )\n        )\n      ),\n    },\n    optional: {\n      validate: assertOneOf(true, false),\n      optional: true,\n    },\n    typeArguments: {\n      validate: assertNodeType('TypeParameterInstantiation'),\n      optional: true,\n    },\n    typeParameters: {\n      validate: assertNodeType('TSTypeParameterInstantiation'),\n      optional: true,\n    },\n  },\n});\n\ndefineType('CatchClause', {\n  visitor: ['param', 'body'],\n  fields: {\n    param: {\n      validate: assertNodeType('Identifier'),\n      optional: true,\n    },\n    body: {\n      validate: assertNodeType('BlockStatement'),\n    },\n  },\n  aliases: ['Scopable', 'BlockParent'],\n});\n\ndefineType('ConditionalExpression', {\n  visitor: ['test', 'consequent', 'alternate'],\n  fields: {\n    test: {\n      validate: assertNodeType('Expression'),\n    },\n    consequent: {\n      validate: assertNodeType('Expression'),\n    },\n    alternate: {\n      validate: assertNodeType('Expression'),\n    },\n  },\n  aliases: ['Expression', 'Conditional'],\n});\n\ndefineType('ContinueStatement', {\n  visitor: ['label'],\n  fields: {\n    label: {\n      validate: assertNodeType('Identifier'),\n      optional: true,\n    },\n  },\n  aliases: ['Statement', 'Terminatorless', 'CompletionStatement'],\n});\n\ndefineType('DebuggerStatement', {\n  aliases: ['Statement'],\n});\n\ndefineType('DoWhileStatement', {\n  visitor: ['test', 'body'],\n  fields: {\n    test: {\n      validate: assertNodeType('Expression'),\n    },\n    body: {\n      validate: assertNodeType('Statement'),\n    },\n  },\n  aliases: ['Statement', 'BlockParent', 'Loop', 'While', 'Scopable'],\n});\n\ndefineType('EmptyStatement', {\n  aliases: ['Statement'],\n});\n\ndefineType('ExpressionStatement', {\n  visitor: ['expression'],\n  fields: {\n    expression: {\n      validate: assertNodeType('Expression'),\n    },\n  },\n  aliases: ['Statement', 'ExpressionWrapper'],\n});\n\ndefineType('File', {\n  builder: ['program', 'comments', 'tokens'],\n  visitor: ['program'],\n  fields: {\n    program: {\n      validate: assertNodeType('Program'),\n    },\n  },\n});\n\ndefineType('ForInStatement', {\n  visitor: ['left', 'right', 'body'],\n  aliases: [\n    'Scopable',\n    'Statement',\n    'For',\n    'BlockParent',\n    'Loop',\n    'ForXStatement',\n  ],\n  fields: {\n    left: {\n      validate: assertNodeType('VariableDeclaration', 'LVal'),\n    },\n    right: {\n      validate: assertNodeType('Expression'),\n    },\n    body: {\n      validate: assertNodeType('Statement'),\n    },\n  },\n});\n\ndefineType('ForStatement', {\n  visitor: ['init', 'test', 'update', 'body'],\n  aliases: ['Scopable', 'Statement', 'For', 'BlockParent', 'Loop'],\n  fields: {\n    init: {\n      validate: assertNodeType('VariableDeclaration', 'Expression'),\n      optional: true,\n    },\n    test: {\n      validate: assertNodeType('Expression'),\n      optional: true,\n    },\n    update: {\n      validate: assertNodeType('Expression'),\n      optional: true,\n    },\n    body: {\n      validate: assertNodeType('Statement'),\n    },\n  },\n});\n\nexport const functionCommon = {\n  params: {\n    validate: chain(\n      assertValueType('array'),\n      assertEach(\n        assertNodeType(\n          'Identifier',\n          'Pattern',\n          'RestElement',\n          'TSParameterProperty'\n        )\n      )\n    ),\n  },\n  generator: {\n    default: false,\n    validate: assertValueType('boolean'),\n  },\n  async: {\n    validate: assertValueType('boolean'),\n    default: false,\n  },\n};\n\nexport const functionTypeAnnotationCommon = {\n  returnType: {\n    validate: assertNodeType('TypeAnnotation', 'TSTypeAnnotation', 'Noop'),\n    optional: true,\n  },\n  typeParameters: {\n    validate: assertNodeType(\n      'TypeParameterDeclaration',\n      'TSTypeParameterDeclaration',\n      'Noop'\n    ),\n    optional: true,\n  },\n};\n\nexport const functionDeclarationCommon = {\n  ...functionCommon,\n  declare: {\n    validate: assertValueType('boolean'),\n    optional: true,\n  },\n  id: {\n    validate: assertNodeType('Identifier'),\n    optional: true, // May be null for `export default function`\n  },\n};\n\ndefineType('FunctionDeclaration', {\n  builder: ['id', 'params', 'body', 'generator', 'async'],\n  visitor: ['id', 'params', 'body', 'returnType', 'typeParameters'],\n  fields: {\n    ...functionDeclarationCommon,\n    ...functionTypeAnnotationCommon,\n    body: {\n      validate: assertNodeType('BlockStatement'),\n    },\n  },\n  aliases: [\n    'Scopable',\n    'Function',\n    'BlockParent',\n    'FunctionParent',\n    'Statement',\n    'Pureish',\n    'Declaration',\n  ],\n});\n\ndefineType('FunctionExpression', {\n  inherits: 'FunctionDeclaration',\n  aliases: [\n    'Scopable',\n    'Function',\n    'BlockParent',\n    'FunctionParent',\n    'Expression',\n    'Pureish',\n  ],\n  fields: {\n    ...functionCommon,\n    ...functionTypeAnnotationCommon,\n    id: {\n      validate: assertNodeType('Identifier'),\n      optional: true,\n    },\n    body: {\n      validate: assertNodeType('BlockStatement'),\n    },\n  },\n});\n\nexport const patternLikeCommon = {\n  typeAnnotation: {\n    // TODO: @babel/plugin-transform-flow-comments puts a Noop here, is there a better way?\n    validate: assertNodeType('TypeAnnotation', 'TSTypeAnnotation', 'Noop'),\n    optional: true,\n  },\n  decorators: {\n    validate: chain(\n      assertValueType('array'),\n      assertEach(assertNodeType('Decorator'))\n    ),\n  },\n};\n\ndefineType('Identifier', {\n  builder: ['name'],\n  visitor: ['typeAnnotation', 'decorators' /* for legacy param decorators */],\n  aliases: ['Expression', 'PatternLike', 'LVal', 'TSEntityName'],\n  fields: {\n    ...patternLikeCommon,\n    name: {\n      validate: chain(function(node, key, val) {\n        if (!isValidIdentifier(val)) {\n          // throw new TypeError(`\"${val}\" is not a valid identifer name`);\n        }\n      }, assertValueType('string')),\n    },\n    optional: {\n      validate: assertValueType('boolean'),\n      optional: true,\n    },\n  },\n});\n\ndefineType('IfStatement', {\n  visitor: ['test', 'consequent', 'alternate'],\n  aliases: ['Statement', 'Conditional'],\n  fields: {\n    test: {\n      validate: assertNodeType('Expression'),\n    },\n    consequent: {\n      validate: assertNodeType('Statement'),\n    },\n    alternate: {\n      optional: true,\n      validate: assertNodeType('Statement'),\n    },\n  },\n});\n\ndefineType('LabeledStatement', {\n  visitor: ['label', 'body'],\n  aliases: ['Statement'],\n  fields: {\n    label: {\n      validate: assertNodeType('Identifier'),\n    },\n    body: {\n      validate: assertNodeType('Statement'),\n    },\n  },\n});\n\ndefineType('StringLiteral', {\n  builder: ['value'],\n  fields: {\n    value: {\n      validate: assertValueType('string'),\n    },\n  },\n  aliases: ['Expression', 'Pureish', 'Literal', 'Immutable'],\n});\n\ndefineType('NumericLiteral', {\n  builder: ['value'],\n  deprecatedAlias: 'NumberLiteral',\n  fields: {\n    value: {\n      validate: assertValueType('number'),\n    },\n  },\n  aliases: ['Expression', 'Pureish', 'Literal', 'Immutable'],\n});\n\ndefineType('NullLiteral', {\n  aliases: ['Expression', 'Pureish', 'Literal', 'Immutable'],\n});\n\ndefineType('BooleanLiteral', {\n  builder: ['value'],\n  fields: {\n    value: {\n      validate: assertValueType('boolean'),\n    },\n  },\n  aliases: ['Expression', 'Pureish', 'Literal', 'Immutable'],\n});\n\ndefineType('RegExpLiteral', {\n  builder: ['pattern', 'flags'],\n  deprecatedAlias: 'RegexLiteral',\n  aliases: ['Expression', 'Literal'],\n  fields: {\n    pattern: {\n      validate: assertValueType('string'),\n    },\n    flags: {\n      validate: assertValueType('string'),\n      default: '',\n    },\n  },\n});\n\ndefineType('LogicalExpression', {\n  builder: ['operator', 'left', 'right'],\n  visitor: ['left', 'right'],\n  aliases: ['Binary', 'Expression'],\n  fields: {\n    operator: {\n      validate: assertOneOf(...LOGICAL_OPERATORS),\n    },\n    left: {\n      validate: assertNodeType('Expression'),\n    },\n    right: {\n      validate: assertNodeType('Expression'),\n    },\n  },\n});\n\ndefineType('MemberExpression', {\n  builder: ['object', 'property', 'computed', 'optional'],\n  visitor: ['object', 'property'],\n  aliases: ['Expression', 'LVal'],\n  fields: {\n    object: {\n      validate: assertNodeType('Expression'),\n    },\n    property: {\n      validate: (function() {\n        const normal = assertNodeType('Identifier', 'PrivateName');\n        const computed = assertNodeType('Expression');\n\n        return function(node, key, val) {\n          const validator = node.computed ? computed : normal;\n          validator(node, key, val);\n        };\n      })(),\n    },\n    computed: {\n      default: false,\n    },\n    optional: {\n      validate: assertOneOf(true, false),\n      optional: true,\n    },\n  },\n});\n\ndefineType('NewExpression', { inherits: 'CallExpression' });\n\ndefineType('Program', {\n  // Note: We explicitly leave 'interpreter' out here because it is\n  // conceptually comment-like, and Babel does not traverse comments either.\n  visitor: ['directives', 'body'],\n  builder: ['body', 'directives', 'sourceType', 'interpreter'],\n  fields: {\n    sourceFile: {\n      validate: assertValueType('string'),\n    },\n    sourceType: {\n      validate: assertOneOf('script', 'module'),\n      default: 'script',\n    },\n    interpreter: {\n      validate: assertNodeType('InterpreterDirective'),\n      default: null,\n      optional: true,\n    },\n    directives: {\n      validate: chain(\n        assertValueType('array'),\n        assertEach(assertNodeType('Directive'))\n      ),\n      default: [],\n    },\n    body: {\n      validate: chain(\n        assertValueType('array'),\n        assertEach(assertNodeType('Statement'))\n      ),\n    },\n  },\n  aliases: ['Scopable', 'BlockParent', 'Block'],\n});\n\ndefineType('ObjectExpression', {\n  visitor: ['properties'],\n  aliases: ['Expression'],\n  fields: {\n    properties: {\n      validate: chain(\n        assertValueType('array'),\n        assertEach(\n          assertNodeType('ObjectMethod', 'ObjectProperty', 'SpreadElement')\n        )\n      ),\n    },\n  },\n});\n\ndefineType('ObjectMethod', {\n  builder: ['kind', 'key', 'params', 'body', 'computed'],\n  fields: {\n    ...functionCommon,\n    ...functionTypeAnnotationCommon,\n    kind: {\n      validate: chain(\n        assertValueType('string'),\n        assertOneOf('method', 'get', 'set')\n      ),\n      default: 'method',\n    },\n    computed: {\n      validate: assertValueType('boolean'),\n      default: false,\n    },\n    key: {\n      validate: (function() {\n        const normal = assertNodeType(\n          'Identifier',\n          'StringLiteral',\n          'NumericLiteral'\n        );\n        const computed = assertNodeType('Expression');\n\n        return function(node, key, val) {\n          const validator = node.computed ? computed : normal;\n          validator(node, key, val);\n        };\n      })(),\n    },\n    decorators: {\n      validate: chain(\n        assertValueType('array'),\n        assertEach(assertNodeType('Decorator'))\n      ),\n    },\n    body: {\n      validate: assertNodeType('BlockStatement'),\n    },\n  },\n  visitor: [\n    'key',\n    'params',\n    'body',\n    'decorators',\n    'returnType',\n    'typeParameters',\n  ],\n  aliases: [\n    'UserWhitespacable',\n    'Function',\n    'Scopable',\n    'BlockParent',\n    'FunctionParent',\n    'Method',\n    'ObjectMember',\n  ],\n});\n\ndefineType('ObjectProperty', {\n  builder: ['key', 'value', 'computed', 'shorthand', 'decorators'],\n  fields: {\n    computed: {\n      validate: assertValueType('boolean'),\n      default: false,\n    },\n    key: {\n      validate: (function() {\n        const normal = assertNodeType(\n          'Identifier',\n          'StringLiteral',\n          'NumericLiteral'\n        );\n        const computed = assertNodeType('Expression');\n\n        return function(node, key, val) {\n          const validator = node.computed ? computed : normal;\n          validator(node, key, val);\n        };\n      })(),\n    },\n    value: {\n      // Value may be PatternLike if this is an AssignmentProperty\n      // https://github.com/babel/babylon/issues/434\n      validate: assertNodeType('Expression', 'PatternLike'),\n    },\n    shorthand: {\n      validate: assertValueType('boolean'),\n      default: false,\n    },\n    decorators: {\n      validate: chain(\n        assertValueType('array'),\n        assertEach(assertNodeType('Decorator'))\n      ),\n      optional: true,\n    },\n  },\n  visitor: ['key', 'value', 'decorators'],\n  aliases: ['UserWhitespacable', 'Property', 'ObjectMember'],\n});\n\ndefineType('RestElement', {\n  visitor: ['argument', 'typeAnnotation'],\n  builder: ['argument'],\n  aliases: ['LVal', 'PatternLike'],\n  deprecatedAlias: 'RestProperty',\n  fields: {\n    ...patternLikeCommon,\n    argument: {\n      validate: assertNodeType('LVal'),\n    },\n  },\n});\n\ndefineType('ReturnStatement', {\n  visitor: ['argument'],\n  aliases: ['Statement', 'Terminatorless', 'CompletionStatement'],\n  fields: {\n    argument: {\n      validate: assertNodeType('Expression'),\n      optional: true,\n    },\n  },\n});\n\ndefineType('SequenceExpression', {\n  visitor: ['expressions'],\n  fields: {\n    expressions: {\n      validate: chain(\n        assertValueType('array'),\n        assertEach(assertNodeType('Expression'))\n      ),\n    },\n  },\n  aliases: ['Expression'],\n});\n\ndefineType('ParenthesizedExpression', {\n  visitor: ['expression'],\n  aliases: ['Expression', 'ExpressionWrapper'],\n  fields: {\n    expression: {\n      validate: assertNodeType('Expression'),\n    },\n  },\n});\n\ndefineType('SwitchCase', {\n  visitor: ['test', 'consequent'],\n  fields: {\n    test: {\n      validate: assertNodeType('Expression'),\n      optional: true,\n    },\n    consequent: {\n      validate: chain(\n        assertValueType('array'),\n        assertEach(assertNodeType('Statement'))\n      ),\n    },\n  },\n});\n\ndefineType('SwitchStatement', {\n  visitor: ['discriminant', 'cases'],\n  aliases: ['Statement', 'BlockParent', 'Scopable'],\n  fields: {\n    discriminant: {\n      validate: assertNodeType('Expression'),\n    },\n    cases: {\n      validate: chain(\n        assertValueType('array'),\n        assertEach(assertNodeType('SwitchCase'))\n      ),\n    },\n  },\n});\n\ndefineType('ThisExpression', {\n  aliases: ['Expression'],\n});\n\ndefineType('ThrowStatement', {\n  visitor: ['argument'],\n  aliases: ['Statement', 'Terminatorless', 'CompletionStatement'],\n  fields: {\n    argument: {\n      validate: assertNodeType('Expression'),\n    },\n  },\n});\n\n// todo: at least handler or finalizer should be set to be valid\ndefineType('TryStatement', {\n  visitor: ['block', 'handler', 'finalizer'],\n  aliases: ['Statement'],\n  fields: {\n    block: {\n      validate: assertNodeType('BlockStatement'),\n    },\n    handler: {\n      optional: true,\n      validate: assertNodeType('CatchClause'),\n    },\n    finalizer: {\n      optional: true,\n      validate: assertNodeType('BlockStatement'),\n    },\n  },\n});\n\ndefineType('UnaryExpression', {\n  builder: ['operator', 'argument', 'prefix'],\n  fields: {\n    prefix: {\n      default: true,\n    },\n    argument: {\n      validate: assertNodeType('Expression'),\n    },\n    operator: {\n      validate: assertOneOf(...UNARY_OPERATORS),\n    },\n  },\n  visitor: ['argument'],\n  aliases: ['UnaryLike', 'Expression'],\n});\n\ndefineType('UpdateExpression', {\n  builder: ['operator', 'argument', 'prefix'],\n  fields: {\n    prefix: {\n      default: false,\n    },\n    argument: {\n      validate: assertNodeType('Expression'),\n    },\n    operator: {\n      validate: assertOneOf(...UPDATE_OPERATORS),\n    },\n  },\n  visitor: ['argument'],\n  aliases: ['Expression'],\n});\n\ndefineType('VariableDeclaration', {\n  builder: ['kind', 'declarations'],\n  visitor: ['declarations'],\n  aliases: ['Statement', 'Declaration'],\n  fields: {\n    declare: {\n      validate: assertValueType('boolean'),\n      optional: true,\n    },\n    kind: {\n      validate: chain(\n        assertValueType('string'),\n        assertOneOf('var', 'let', 'const')\n      ),\n    },\n    declarations: {\n      validate: chain(\n        assertValueType('array'),\n        assertEach(assertNodeType('VariableDeclarator'))\n      ),\n    },\n  },\n});\n\ndefineType('VariableDeclarator', {\n  visitor: ['id', 'init'],\n  fields: {\n    id: {\n      validate: assertNodeType('LVal'),\n    },\n    definite: {\n      optional: true,\n      validate: assertValueType('boolean'),\n    },\n    init: {\n      optional: true,\n      validate: assertNodeType('Expression'),\n    },\n  },\n});\n\ndefineType('WhileStatement', {\n  visitor: ['test', 'body'],\n  aliases: ['Statement', 'BlockParent', 'Loop', 'While', 'Scopable'],\n  fields: {\n    test: {\n      validate: assertNodeType('Expression'),\n    },\n    body: {\n      validate: assertNodeType('BlockStatement', 'Statement'),\n    },\n  },\n});\n\ndefineType('WithStatement', {\n  visitor: ['object', 'body'],\n  aliases: ['Statement'],\n  fields: {\n    object: {\n      validate: assertNodeType('Expression'),\n    },\n    body: {\n      validate: assertNodeType('BlockStatement', 'Statement'),\n    },\n  },\n});\n","// @flow\nimport defineType, {\n  assertNodeType,\n  assertValueType,\n  chain,\n  assertEach,\n  assertOneOf,\n  validateOptional,\n} from \"./utils\";\nimport {\n  functionCommon,\n  functionTypeAnnotationCommon,\n  patternLikeCommon,\n} from \"./core\";\n\ndefineType(\"AssignmentPattern\", {\n  visitor: [\"left\", \"right\", \"decorators\" /* for legacy param decorators */],\n  builder: [\"left\", \"right\"],\n  aliases: [\"Pattern\", \"PatternLike\", \"LVal\"],\n  fields: {\n    ...patternLikeCommon,\n    left: {\n      validate: assertNodeType(\"Identifier\", \"ObjectPattern\", \"ArrayPattern\"),\n    },\n    right: {\n      validate: assertNodeType(\"Expression\"),\n    },\n    decorators: {\n      validate: chain(\n        assertValueType(\"array\"),\n        assertEach(assertNodeType(\"Decorator\")),\n      ),\n    },\n  },\n});\n\ndefineType(\"ArrayPattern\", {\n  visitor: [\"elements\", \"typeAnnotation\"],\n  builder: [\"elements\"],\n  aliases: [\"Pattern\", \"PatternLike\", \"LVal\"],\n  fields: {\n    ...patternLikeCommon,\n    elements: {\n      validate: chain(\n        assertValueType(\"array\"),\n        assertEach(assertNodeType(\"PatternLike\")),\n      ),\n    },\n    decorators: {\n      validate: chain(\n        assertValueType(\"array\"),\n        assertEach(assertNodeType(\"Decorator\")),\n      ),\n    },\n  },\n});\n\ndefineType(\"ArrowFunctionExpression\", {\n  builder: [\"params\", \"body\", \"async\"],\n  visitor: [\"params\", \"body\", \"returnType\", \"typeParameters\"],\n  aliases: [\n    \"Scopable\",\n    \"Function\",\n    \"BlockParent\",\n    \"FunctionParent\",\n    \"Expression\",\n    \"Pureish\",\n  ],\n  fields: {\n    ...functionCommon,\n    ...functionTypeAnnotationCommon,\n    expression: {\n      // https://github.com/babel/babylon/issues/505\n      validate: assertValueType(\"boolean\"),\n    },\n    body: {\n      validate: assertNodeType(\"BlockStatement\", \"Expression\"),\n    },\n  },\n});\n\ndefineType(\"ClassBody\", {\n  visitor: [\"body\"],\n  fields: {\n    body: {\n      validate: chain(\n        assertValueType(\"array\"),\n        assertEach(\n          assertNodeType(\n            \"ClassMethod\",\n            \"ClassPrivateMethod\",\n            \"ClassProperty\",\n            \"ClassPrivateProperty\",\n            \"TSDeclareMethod\",\n            \"TSIndexSignature\",\n          ),\n        ),\n      ),\n    },\n  },\n});\n\nconst classCommon = {\n  typeParameters: {\n    validate: assertNodeType(\n      \"TypeParameterDeclaration\",\n      \"TSTypeParameterDeclaration\",\n      \"Noop\",\n    ),\n    optional: true,\n  },\n  body: {\n    validate: assertNodeType(\"ClassBody\"),\n  },\n  superClass: {\n    optional: true,\n    validate: assertNodeType(\"Expression\"),\n  },\n  superTypeParameters: {\n    validate: assertNodeType(\n      \"TypeParameterInstantiation\",\n      \"TSTypeParameterInstantiation\",\n    ),\n    optional: true,\n  },\n  implements: {\n    validate: chain(\n      assertValueType(\"array\"),\n      assertEach(\n        assertNodeType(\"TSExpressionWithTypeArguments\", \"ClassImplements\"),\n      ),\n    ),\n    optional: true,\n  },\n};\n\ndefineType(\"ClassDeclaration\", {\n  builder: [\"id\", \"superClass\", \"body\", \"decorators\"],\n  visitor: [\n    \"id\",\n    \"body\",\n    \"superClass\",\n    \"mixins\",\n    \"typeParameters\",\n    \"superTypeParameters\",\n    \"implements\",\n    \"decorators\",\n  ],\n  aliases: [\"Scopable\", \"Class\", \"Statement\", \"Declaration\", \"Pureish\"],\n  fields: {\n    ...classCommon,\n    declare: {\n      validate: assertValueType(\"boolean\"),\n      optional: true,\n    },\n    abstract: {\n      validate: assertValueType(\"boolean\"),\n      optional: true,\n    },\n    id: {\n      validate: assertNodeType(\"Identifier\"),\n      optional: true, // Missing if this is the child of an ExportDefaultDeclaration.\n    },\n    decorators: {\n      validate: chain(\n        assertValueType(\"array\"),\n        assertEach(assertNodeType(\"Decorator\")),\n      ),\n      optional: true,\n    },\n  },\n});\n\ndefineType(\"ClassExpression\", {\n  inherits: \"ClassDeclaration\",\n  aliases: [\"Scopable\", \"Class\", \"Expression\", \"Pureish\"],\n  fields: {\n    ...classCommon,\n    id: {\n      optional: true,\n      validate: assertNodeType(\"Identifier\"),\n    },\n    body: {\n      validate: assertNodeType(\"ClassBody\"),\n    },\n    superClass: {\n      optional: true,\n      validate: assertNodeType(\"Expression\"),\n    },\n    decorators: {\n      validate: chain(\n        assertValueType(\"array\"),\n        assertEach(assertNodeType(\"Decorator\")),\n      ),\n      optional: true,\n    },\n  },\n});\n\ndefineType(\"ExportAllDeclaration\", {\n  visitor: [\"source\"],\n  aliases: [\n    \"Statement\",\n    \"Declaration\",\n    \"ModuleDeclaration\",\n    \"ExportDeclaration\",\n  ],\n  fields: {\n    source: {\n      validate: assertNodeType(\"StringLiteral\"),\n    },\n  },\n});\n\ndefineType(\"ExportDefaultDeclaration\", {\n  visitor: [\"declaration\"],\n  aliases: [\n    \"Statement\",\n    \"Declaration\",\n    \"ModuleDeclaration\",\n    \"ExportDeclaration\",\n  ],\n  fields: {\n    declaration: {\n      validate: assertNodeType(\n        \"FunctionDeclaration\",\n        \"TSDeclareFunction\",\n        \"ClassDeclaration\",\n        \"Expression\",\n      ),\n    },\n  },\n});\n\ndefineType(\"ExportNamedDeclaration\", {\n  visitor: [\"declaration\", \"specifiers\", \"source\"],\n  aliases: [\n    \"Statement\",\n    \"Declaration\",\n    \"ModuleDeclaration\",\n    \"ExportDeclaration\",\n  ],\n  fields: {\n    declaration: {\n      validate: assertNodeType(\"Declaration\"),\n      optional: true,\n    },\n    specifiers: {\n      validate: chain(\n        assertValueType(\"array\"),\n        assertEach(\n          assertNodeType(\n            \"ExportSpecifier\",\n            \"ExportDefaultSpecifier\",\n            \"ExportNamespaceSpecifier\",\n          ),\n        ),\n      ),\n    },\n    source: {\n      validate: assertNodeType(\"StringLiteral\"),\n      optional: true,\n    },\n    exportKind: validateOptional(assertOneOf(\"type\", \"value\")),\n  },\n});\n\ndefineType(\"ExportSpecifier\", {\n  visitor: [\"local\", \"exported\"],\n  aliases: [\"ModuleSpecifier\"],\n  fields: {\n    local: {\n      validate: assertNodeType(\"Identifier\"),\n    },\n    exported: {\n      validate: assertNodeType(\"Identifier\"),\n    },\n  },\n});\n\ndefineType(\"ForOfStatement\", {\n  visitor: [\"left\", \"right\", \"body\"],\n  aliases: [\n    \"Scopable\",\n    \"Statement\",\n    \"For\",\n    \"BlockParent\",\n    \"Loop\",\n    \"ForXStatement\",\n  ],\n  fields: {\n    left: {\n      validate: assertNodeType(\"VariableDeclaration\", \"LVal\"),\n    },\n    right: {\n      validate: assertNodeType(\"Expression\"),\n    },\n    body: {\n      validate: assertNodeType(\"Statement\"),\n    },\n    await: {\n      default: false,\n      validate: assertValueType(\"boolean\"),\n    },\n  },\n});\n\ndefineType(\"ImportDeclaration\", {\n  visitor: [\"specifiers\", \"source\"],\n  aliases: [\"Statement\", \"Declaration\", \"ModuleDeclaration\"],\n  fields: {\n    specifiers: {\n      validate: chain(\n        assertValueType(\"array\"),\n        assertEach(\n          assertNodeType(\n            \"ImportSpecifier\",\n            \"ImportDefaultSpecifier\",\n            \"ImportNamespaceSpecifier\",\n          ),\n        ),\n      ),\n    },\n    source: {\n      validate: assertNodeType(\"StringLiteral\"),\n    },\n    importKind: {\n      // Handle Flowtype's extension \"import {typeof foo} from\"\n      validate: assertOneOf(\"type\", \"typeof\", \"value\"),\n      optional: true,\n    },\n  },\n});\n\ndefineType(\"ImportDefaultSpecifier\", {\n  visitor: [\"local\"],\n  aliases: [\"ModuleSpecifier\"],\n  fields: {\n    local: {\n      validate: assertNodeType(\"Identifier\"),\n    },\n  },\n});\n\ndefineType(\"ImportNamespaceSpecifier\", {\n  visitor: [\"local\"],\n  aliases: [\"ModuleSpecifier\"],\n  fields: {\n    local: {\n      validate: assertNodeType(\"Identifier\"),\n    },\n  },\n});\n\ndefineType(\"ImportSpecifier\", {\n  visitor: [\"local\", \"imported\"],\n  aliases: [\"ModuleSpecifier\"],\n  fields: {\n    local: {\n      validate: assertNodeType(\"Identifier\"),\n    },\n    imported: {\n      validate: assertNodeType(\"Identifier\"),\n    },\n    importKind: {\n      // Handle Flowtype's extension \"import {typeof foo} from\"\n      validate: assertOneOf(\"type\", \"typeof\"),\n      optional: true,\n    },\n  },\n});\n\ndefineType(\"MetaProperty\", {\n  visitor: [\"meta\", \"property\"],\n  aliases: [\"Expression\"],\n  fields: {\n    // todo: limit to new.target\n    meta: {\n      validate: assertNodeType(\"Identifier\"),\n    },\n    property: {\n      validate: assertNodeType(\"Identifier\"),\n    },\n  },\n});\n\nexport const classMethodOrPropertyCommon = {\n  abstract: {\n    validate: assertValueType(\"boolean\"),\n    optional: true,\n  },\n  accessibility: {\n    validate: chain(\n      assertValueType(\"string\"),\n      assertOneOf(\"public\", \"private\", \"protected\"),\n    ),\n    optional: true,\n  },\n  static: {\n    validate: assertValueType(\"boolean\"),\n    optional: true,\n  },\n  computed: {\n    default: false,\n    validate: assertValueType(\"boolean\"),\n  },\n  optional: {\n    validate: assertValueType(\"boolean\"),\n    optional: true,\n  },\n  key: {\n    validate: chain(\n      (function() {\n        const normal = assertNodeType(\n          \"Identifier\",\n          \"StringLiteral\",\n          \"NumericLiteral\",\n        );\n        const computed = assertNodeType(\"Expression\");\n\n        return function(node: Object, key: string, val: any) {\n          const validator = node.computed ? computed : normal;\n          validator(node, key, val);\n        };\n      })(),\n      assertNodeType(\n        \"Identifier\",\n        \"StringLiteral\",\n        \"NumericLiteral\",\n        \"Expression\",\n      ),\n    ),\n  },\n};\n\nexport const classMethodOrDeclareMethodCommon = {\n  ...functionCommon,\n  ...classMethodOrPropertyCommon,\n  kind: {\n    validate: chain(\n      assertValueType(\"string\"),\n      assertOneOf(\"get\", \"set\", \"method\", \"constructor\"),\n    ),\n    default: \"method\",\n  },\n  access: {\n    validate: chain(\n      assertValueType(\"string\"),\n      assertOneOf(\"public\", \"private\", \"protected\"),\n    ),\n    optional: true,\n  },\n  decorators: {\n    validate: chain(\n      assertValueType(\"array\"),\n      assertEach(assertNodeType(\"Decorator\")),\n    ),\n    optional: true,\n  },\n};\n\ndefineType(\"ClassMethod\", {\n  aliases: [\"Function\", \"Scopable\", \"BlockParent\", \"FunctionParent\", \"Method\"],\n  builder: [\"kind\", \"key\", \"params\", \"body\", \"computed\", \"static\"],\n  visitor: [\n    \"key\",\n    \"params\",\n    \"body\",\n    \"decorators\",\n    \"returnType\",\n    \"typeParameters\",\n  ],\n  fields: {\n    ...classMethodOrDeclareMethodCommon,\n    ...functionTypeAnnotationCommon,\n    body: {\n      validate: assertNodeType(\"BlockStatement\"),\n    },\n  },\n});\n\ndefineType(\"ObjectPattern\", {\n  visitor: [\n    \"properties\",\n    \"typeAnnotation\",\n    \"decorators\" /* for legacy param decorators */,\n  ],\n  builder: [\"properties\"],\n  aliases: [\"Pattern\", \"PatternLike\", \"LVal\"],\n  fields: {\n    ...patternLikeCommon,\n    properties: {\n      validate: chain(\n        assertValueType(\"array\"),\n        assertEach(assertNodeType(\"RestElement\", \"ObjectProperty\")),\n      ),\n    },\n  },\n});\n\ndefineType(\"SpreadElement\", {\n  visitor: [\"argument\"],\n  aliases: [\"UnaryLike\"],\n  deprecatedAlias: \"SpreadProperty\",\n  fields: {\n    argument: {\n      validate: assertNodeType(\"Expression\"),\n    },\n  },\n});\n\ndefineType(\"Super\", {\n  aliases: [\"Expression\"],\n});\n\ndefineType(\"TaggedTemplateExpression\", {\n  visitor: [\"tag\", \"quasi\"],\n  aliases: [\"Expression\"],\n  fields: {\n    tag: {\n      validate: assertNodeType(\"Expression\"),\n    },\n    quasi: {\n      validate: assertNodeType(\"TemplateLiteral\"),\n    },\n    typeParameters: {\n      validate: assertNodeType(\n        \"TypeParameterInstantiation\",\n        \"TSTypeParameterInstantiation\",\n      ),\n      optional: true,\n    },\n  },\n});\n\ndefineType(\"TemplateElement\", {\n  builder: [\"value\", \"tail\"],\n  fields: {\n    value: {\n      // todo: flatten `raw` into main node\n    },\n    tail: {\n      validate: assertValueType(\"boolean\"),\n      default: false,\n    },\n  },\n});\n\ndefineType(\"TemplateLiteral\", {\n  visitor: [\"quasis\", \"expressions\"],\n  aliases: [\"Expression\", \"Literal\"],\n  fields: {\n    quasis: {\n      validate: chain(\n        assertValueType(\"array\"),\n        assertEach(assertNodeType(\"TemplateElement\")),\n      ),\n    },\n    expressions: {\n      validate: chain(\n        assertValueType(\"array\"),\n        assertEach(assertNodeType(\"Expression\")),\n      ),\n    },\n  },\n});\n\ndefineType(\"YieldExpression\", {\n  builder: [\"argument\", \"delegate\"],\n  visitor: [\"argument\"],\n  aliases: [\"Expression\", \"Terminatorless\"],\n  fields: {\n    delegate: {\n      validate: assertValueType(\"boolean\"),\n      default: false,\n    },\n    argument: {\n      optional: true,\n      validate: assertNodeType(\"Expression\"),\n    },\n  },\n});\n","// @flow\nimport defineType, {\n  arrayOfType,\n  assertOneOf,\n  assertValueType,\n  validate,\n  validateOptional,\n  validateOptionalType,\n  validateType,\n} from \"./utils\";\n\nconst defineInterfaceishType = (\n  name: string,\n  typeParameterType: string = \"TypeParameterDeclaration\",\n) => {\n  defineType(name, {\n    builder: [\"id\", \"typeParameters\", \"extends\", \"body\"],\n    visitor: [\n      \"id\",\n      \"typeParameters\",\n      \"extends\",\n      \"mixins\",\n      \"implements\",\n      \"body\",\n    ],\n    aliases: [\"Flow\", \"FlowDeclaration\", \"Statement\", \"Declaration\"],\n    fields: {\n      id: validateType(\"Identifier\"),\n      typeParameters: validateOptionalType(typeParameterType),\n      extends: validateOptional(arrayOfType(\"InterfaceExtends\")),\n      mixins: validateOptional(arrayOfType(\"InterfaceExtends\")),\n      implements: validateOptional(arrayOfType(\"ClassImplements\")),\n      body: validateType(\"ObjectTypeAnnotation\"),\n    },\n  });\n};\n\ndefineType(\"AnyTypeAnnotation\", {\n  aliases: [\"Flow\", \"FlowType\", \"FlowBaseAnnotation\"],\n});\n\ndefineType(\"ArrayTypeAnnotation\", {\n  visitor: [\"elementType\"],\n  aliases: [\"Flow\", \"FlowType\"],\n  fields: {\n    elementType: validateType(\"FlowType\"),\n  },\n});\n\ndefineType(\"BooleanTypeAnnotation\", {\n  aliases: [\"Flow\", \"FlowType\", \"FlowBaseAnnotation\"],\n});\n\ndefineType(\"BooleanLiteralTypeAnnotation\", {\n  builder: [\"value\"],\n  aliases: [\"Flow\", \"FlowType\"],\n  fields: {\n    value: validate(assertValueType(\"boolean\")),\n  },\n});\n\ndefineType(\"NullLiteralTypeAnnotation\", {\n  aliases: [\"Flow\", \"FlowType\", \"FlowBaseAnnotation\"],\n});\n\ndefineType(\"ClassImplements\", {\n  visitor: [\"id\", \"typeParameters\"],\n  aliases: [\"Flow\"],\n  fields: {\n    id: validateType(\"Identifier\"),\n    typeParameters: validateOptionalType(\"TypeParameterInstantiation\"),\n  },\n});\n\ndefineInterfaceishType(\"DeclareClass\");\n\ndefineType(\"DeclareFunction\", {\n  visitor: [\"id\"],\n  aliases: [\"Flow\", \"FlowDeclaration\", \"Statement\", \"Declaration\"],\n  fields: {\n    id: validateType(\"Identifier\"),\n    predicate: validateOptionalType(\"DeclaredPredicate\"),\n  },\n});\n\ndefineInterfaceishType(\"DeclareInterface\");\n\ndefineType(\"DeclareModule\", {\n  builder: [\"id\", \"body\", \"kind\"],\n  visitor: [\"id\", \"body\"],\n  aliases: [\"Flow\", \"FlowDeclaration\", \"Statement\", \"Declaration\"],\n  fields: {\n    id: validateType([\"Identifier\", \"StringLiteral\"]),\n    body: validateType(\"BlockStatement\"),\n    kind: validateOptional(assertOneOf(\"CommonJS\", \"ES\")),\n  },\n});\n\ndefineType(\"DeclareModuleExports\", {\n  visitor: [\"typeAnnotation\"],\n  aliases: [\"Flow\", \"FlowDeclaration\", \"Statement\", \"Declaration\"],\n  fields: {\n    typeAnnotation: validateType(\"TypeAnnotation\"),\n  },\n});\n\ndefineType(\"DeclareTypeAlias\", {\n  visitor: [\"id\", \"typeParameters\", \"right\"],\n  aliases: [\"Flow\", \"FlowDeclaration\", \"Statement\", \"Declaration\"],\n  fields: {\n    id: validateType(\"Identifier\"),\n    typeParameters: validateOptionalType(\"TypeParameterDeclaration\"),\n    right: validateType(\"FlowType\"),\n  },\n});\n\ndefineType(\"DeclareOpaqueType\", {\n  visitor: [\"id\", \"typeParameters\", \"supertype\"],\n  aliases: [\"Flow\", \"FlowDeclaration\", \"Statement\", \"Declaration\"],\n  fields: {\n    id: validateType(\"Identifier\"),\n    typeParameters: validateOptionalType(\"TypeParameterDeclaration\"),\n    supertype: validateOptionalType(\"FlowType\"),\n  },\n});\n\ndefineType(\"DeclareVariable\", {\n  visitor: [\"id\"],\n  aliases: [\"Flow\", \"FlowDeclaration\", \"Statement\", \"Declaration\"],\n  fields: {\n    id: validateType(\"Identifier\"),\n  },\n});\n\ndefineType(\"DeclareExportDeclaration\", {\n  visitor: [\"declaration\", \"specifiers\", \"source\"],\n  aliases: [\"Flow\", \"FlowDeclaration\", \"Statement\", \"Declaration\"],\n  fields: {\n    declaration: validateOptionalType(\"Flow\"),\n    specifiers: validateOptional(\n      arrayOfType([\"ExportSpecifier\", \"ExportNamespaceSpecifier\"]),\n    ),\n    source: validateOptionalType(\"StringLiteral\"),\n    default: validateOptional(assertValueType(\"boolean\")),\n  },\n});\n\ndefineType(\"DeclareExportAllDeclaration\", {\n  visitor: [\"source\"],\n  aliases: [\"Flow\", \"FlowDeclaration\", \"Statement\", \"Declaration\"],\n  fields: {\n    source: validateType(\"StringLiteral\"),\n    exportKind: validateOptional(assertOneOf(\"type\", \"value\")),\n  },\n});\n\ndefineType(\"DeclaredPredicate\", {\n  visitor: [\"value\"],\n  aliases: [\"Flow\", \"FlowPredicate\"],\n  fields: {\n    value: validateType(\"Flow\"),\n  },\n});\n\ndefineType(\"ExistsTypeAnnotation\", {\n  aliases: [\"Flow\", \"FlowType\"],\n});\n\ndefineType(\"FunctionTypeAnnotation\", {\n  visitor: [\"typeParameters\", \"params\", \"rest\", \"returnType\"],\n  aliases: [\"Flow\", \"FlowType\"],\n  fields: {\n    typeParameters: validateOptionalType(\"TypeParameterDeclaration\"),\n    params: validate(arrayOfType(\"FunctionTypeParam\")),\n    rest: validateOptionalType(\"FunctionTypeParam\"),\n    returnType: validateType(\"FlowType\"),\n  },\n});\n\ndefineType(\"FunctionTypeParam\", {\n  visitor: [\"name\", \"typeAnnotation\"],\n  aliases: [\"Flow\"],\n  fields: {\n    name: validateOptionalType(\"Identifier\"),\n    typeAnnotation: validateType(\"FlowType\"),\n    optional: validateOptional(assertValueType(\"boolean\")),\n  },\n});\n\ndefineType(\"GenericTypeAnnotation\", {\n  visitor: [\"id\", \"typeParameters\"],\n  aliases: [\"Flow\", \"FlowType\"],\n  fields: {\n    id: validateType([\"Identifier\", \"QualifiedTypeIdentifier\"]),\n    typeParameters: validateOptionalType(\"TypeParameterInstantiation\"),\n  },\n});\n\ndefineType(\"InferredPredicate\", {\n  aliases: [\"Flow\", \"FlowPredicate\"],\n});\n\ndefineType(\"InterfaceExtends\", {\n  visitor: [\"id\", \"typeParameters\"],\n  aliases: [\"Flow\"],\n  fields: {\n    id: validateType([\"Identifier\", \"QualifiedTypeIdentifier\"]),\n    typeParameters: validateOptionalType(\"TypeParameterInstantiation\"),\n  },\n});\n\ndefineInterfaceishType(\"InterfaceDeclaration\");\n\ndefineType(\"InterfaceTypeAnnotation\", {\n  visitor: [\"extends\", \"body\"],\n  aliases: [\"Flow\", \"FlowType\"],\n  fields: {\n    extends: validateOptional(arrayOfType(\"InterfaceExtends\")),\n    body: validateType(\"ObjectTypeAnnotation\"),\n  },\n});\n\ndefineType(\"IntersectionTypeAnnotation\", {\n  visitor: [\"types\"],\n  aliases: [\"Flow\", \"FlowType\"],\n  fields: {\n    types: validate(arrayOfType(\"FlowType\")),\n  },\n});\n\ndefineType(\"MixedTypeAnnotation\", {\n  aliases: [\"Flow\", \"FlowType\", \"FlowBaseAnnotation\"],\n});\n\ndefineType(\"EmptyTypeAnnotation\", {\n  aliases: [\"Flow\", \"FlowType\", \"FlowBaseAnnotation\"],\n});\n\ndefineType(\"NullableTypeAnnotation\", {\n  visitor: [\"typeAnnotation\"],\n  aliases: [\"Flow\", \"FlowType\"],\n  fields: {\n    typeAnnotation: validateType(\"FlowType\"),\n  },\n});\n\ndefineType(\"NumberLiteralTypeAnnotation\", {\n  builder: [\"value\"],\n  aliases: [\"Flow\", \"FlowType\"],\n  fields: {\n    value: validate(assertValueType(\"number\")),\n  },\n});\n\ndefineType(\"NumberTypeAnnotation\", {\n  aliases: [\"Flow\", \"FlowType\", \"FlowBaseAnnotation\"],\n});\n\ndefineType(\"ObjectTypeAnnotation\", {\n  visitor: [\"properties\", \"indexers\", \"callProperties\", \"internalSlots\"],\n  aliases: [\"Flow\", \"FlowType\"],\n  builder: [\n    \"properties\",\n    \"indexers\",\n    \"callProperties\",\n    \"internalSlots\",\n    \"exact\",\n  ],\n  fields: {\n    properties: validate(\n      arrayOfType([\"ObjectTypeProperty\", \"ObjectTypeSpreadProperty\"]),\n    ),\n    indexers: validateOptional(arrayOfType(\"ObjectTypeIndexer\")),\n    callProperties: validateOptional(arrayOfType(\"ObjectTypeCallProperty\")),\n    internalSlots: validateOptional(arrayOfType(\"ObjectTypeInternalSlot\")),\n    exact: {\n      validate: assertValueType(\"boolean\"),\n      default: false,\n    },\n    // If the inexact flag is present then this is an object type, and not a\n    // declare class, declare interface, or interface. If it is true, the\n    // object uses ... to express that it is inexact.\n    inexact: validateOptional(assertValueType(\"boolean\")),\n  },\n});\n\ndefineType(\"ObjectTypeInternalSlot\", {\n  visitor: [\"id\", \"value\", \"optional\", \"static\", \"method\"],\n  aliases: [\"Flow\", \"UserWhitespacable\"],\n  fields: {\n    id: validateType(\"Identifier\"),\n    value: validateType(\"FlowType\"),\n    optional: validate(assertValueType(\"boolean\")),\n    static: validate(assertValueType(\"boolean\")),\n    method: validate(assertValueType(\"boolean\")),\n  },\n});\n\ndefineType(\"ObjectTypeCallProperty\", {\n  visitor: [\"value\"],\n  aliases: [\"Flow\", \"UserWhitespacable\"],\n  fields: {\n    value: validateType(\"FlowType\"),\n    static: validate(assertValueType(\"boolean\")),\n  },\n});\n\ndefineType(\"ObjectTypeIndexer\", {\n  visitor: [\"id\", \"key\", \"value\", \"variance\"],\n  aliases: [\"Flow\", \"UserWhitespacable\"],\n  fields: {\n    id: validateOptionalType(\"Identifier\"),\n    key: validateType(\"FlowType\"),\n    value: validateType(\"FlowType\"),\n    static: validate(assertValueType(\"boolean\")),\n    variance: validateOptionalType(\"Variance\"),\n  },\n});\n\ndefineType(\"ObjectTypeProperty\", {\n  visitor: [\"key\", \"value\", \"variance\"],\n  aliases: [\"Flow\", \"UserWhitespacable\"],\n  fields: {\n    key: validateType([\"Identifier\", \"StringLiteral\"]),\n    value: validateType(\"FlowType\"),\n    kind: validate(assertOneOf(\"init\", \"get\", \"set\")),\n    static: validate(assertValueType(\"boolean\")),\n    proto: validate(assertValueType(\"boolean\")),\n    optional: validate(assertValueType(\"boolean\")),\n    variance: validateOptionalType(\"Variance\"),\n  },\n});\n\ndefineType(\"ObjectTypeSpreadProperty\", {\n  visitor: [\"argument\"],\n  aliases: [\"Flow\", \"UserWhitespacable\"],\n  fields: {\n    argument: validateType(\"FlowType\"),\n  },\n});\n\ndefineType(\"OpaqueType\", {\n  visitor: [\"id\", \"typeParameters\", \"supertype\", \"impltype\"],\n  aliases: [\"Flow\", \"FlowDeclaration\", \"Statement\", \"Declaration\"],\n  fields: {\n    id: validateType(\"Identifier\"),\n    typeParameters: validateOptionalType(\"TypeParameterDeclaration\"),\n    supertype: validateOptionalType(\"FlowType\"),\n    impltype: validateType(\"FlowType\"),\n  },\n});\n\ndefineType(\"QualifiedTypeIdentifier\", {\n  visitor: [\"id\", \"qualification\"],\n  aliases: [\"Flow\"],\n  fields: {\n    id: validateType(\"Identifier\"),\n    qualification: validateType([\"Identifier\", \"QualifiedTypeIdentifier\"]),\n  },\n});\n\ndefineType(\"StringLiteralTypeAnnotation\", {\n  builder: [\"value\"],\n  aliases: [\"Flow\", \"FlowType\"],\n  fields: {\n    value: validate(assertValueType(\"string\")),\n  },\n});\n\ndefineType(\"StringTypeAnnotation\", {\n  aliases: [\"Flow\", \"FlowType\", \"FlowBaseAnnotation\"],\n});\n\ndefineType(\"ThisTypeAnnotation\", {\n  aliases: [\"Flow\", \"FlowType\", \"FlowBaseAnnotation\"],\n});\n\ndefineType(\"TupleTypeAnnotation\", {\n  visitor: [\"types\"],\n  aliases: [\"Flow\", \"FlowType\"],\n  fields: {\n    types: validate(arrayOfType(\"FlowType\")),\n  },\n});\n\ndefineType(\"TypeofTypeAnnotation\", {\n  visitor: [\"argument\"],\n  aliases: [\"Flow\", \"FlowType\"],\n  fields: {\n    argument: validateType(\"FlowType\"),\n  },\n});\n\ndefineType(\"TypeAlias\", {\n  visitor: [\"id\", \"typeParameters\", \"right\"],\n  aliases: [\"Flow\", \"FlowDeclaration\", \"Statement\", \"Declaration\"],\n  fields: {\n    id: validateType(\"Identifier\"),\n    typeParameters: validateOptionalType(\"TypeParameterDeclaration\"),\n    right: validateType(\"FlowType\"),\n  },\n});\n\ndefineType(\"TypeAnnotation\", {\n  aliases: [\"Flow\"],\n  visitor: [\"typeAnnotation\"],\n  fields: {\n    typeAnnotation: validateType(\"FlowType\"),\n  },\n});\n\ndefineType(\"TypeCastExpression\", {\n  visitor: [\"expression\", \"typeAnnotation\"],\n  aliases: [\"Flow\", \"ExpressionWrapper\", \"Expression\"],\n  fields: {\n    expression: validateType(\"Expression\"),\n    typeAnnotation: validateType(\"TypeAnnotation\"),\n  },\n});\n\ndefineType(\"TypeParameter\", {\n  aliases: [\"Flow\"],\n  visitor: [\"bound\", \"default\", \"variance\"],\n  fields: {\n    name: validate(assertValueType(\"string\")),\n    bound: validateOptionalType(\"TypeAnnotation\"),\n    default: validateOptionalType(\"FlowType\"),\n    variance: validateOptionalType(\"Variance\"),\n  },\n});\n\ndefineType(\"TypeParameterDeclaration\", {\n  aliases: [\"Flow\"],\n  visitor: [\"params\"],\n  fields: {\n    params: validate(arrayOfType(\"TypeParameter\")),\n  },\n});\n\ndefineType(\"TypeParameterInstantiation\", {\n  aliases: [\"Flow\"],\n  visitor: [\"params\"],\n  fields: {\n    params: validate(arrayOfType(\"FlowType\")),\n  },\n});\n\ndefineType(\"UnionTypeAnnotation\", {\n  visitor: [\"types\"],\n  aliases: [\"Flow\", \"FlowType\"],\n  fields: {\n    types: validate(arrayOfType(\"FlowType\")),\n  },\n});\n\ndefineType(\"Variance\", {\n  aliases: [\"Flow\"],\n  builder: [\"kind\"],\n  fields: {\n    kind: validate(assertOneOf(\"minus\", \"plus\")),\n  },\n});\n\ndefineType(\"VoidTypeAnnotation\", {\n  aliases: [\"Flow\", \"FlowType\", \"FlowBaseAnnotation\"],\n});\n","// @flow\nimport defineType, {\n  assertNodeType,\n  assertValueType,\n  chain,\n  assertEach,\n} from \"./utils\";\n\ndefineType(\"JSXAttribute\", {\n  visitor: [\"name\", \"value\"],\n  aliases: [\"JSX\", \"Immutable\"],\n  fields: {\n    name: {\n      validate: assertNodeType(\"JSXIdentifier\", \"JSXNamespacedName\"),\n    },\n    value: {\n      optional: true,\n      validate: assertNodeType(\n        \"JSXElement\",\n        \"JSXFragment\",\n        \"StringLiteral\",\n        \"JSXExpressionContainer\",\n      ),\n    },\n  },\n});\n\ndefineType(\"JSXClosingElement\", {\n  visitor: [\"name\"],\n  aliases: [\"JSX\", \"Immutable\"],\n  fields: {\n    name: {\n      validate: assertNodeType(\"JSXIdentifier\", \"JSXMemberExpression\"),\n    },\n  },\n});\n\ndefineType(\"JSXElement\", {\n  builder: [\"openingElement\", \"closingElement\", \"children\", \"selfClosing\"],\n  visitor: [\"openingElement\", \"children\", \"closingElement\"],\n  aliases: [\"JSX\", \"Immutable\", \"Expression\"],\n  fields: {\n    openingElement: {\n      validate: assertNodeType(\"JSXOpeningElement\"),\n    },\n    closingElement: {\n      optional: true,\n      validate: assertNodeType(\"JSXClosingElement\"),\n    },\n    children: {\n      validate: chain(\n        assertValueType(\"array\"),\n        assertEach(\n          assertNodeType(\n            \"JSXText\",\n            \"JSXExpressionContainer\",\n            \"JSXSpreadChild\",\n            \"JSXElement\",\n            \"JSXFragment\",\n          ),\n        ),\n      ),\n    },\n  },\n});\n\ndefineType(\"JSXEmptyExpression\", {\n  aliases: [\"JSX\"],\n});\n\ndefineType(\"JSXExpressionContainer\", {\n  visitor: [\"expression\"],\n  aliases: [\"JSX\", \"Immutable\"],\n  fields: {\n    expression: {\n      validate: assertNodeType(\"Expression\", \"JSXEmptyExpression\"),\n    },\n  },\n});\n\ndefineType(\"JSXSpreadChild\", {\n  visitor: [\"expression\"],\n  aliases: [\"JSX\", \"Immutable\"],\n  fields: {\n    expression: {\n      validate: assertNodeType(\"Expression\"),\n    },\n  },\n});\n\ndefineType(\"JSXIdentifier\", {\n  builder: [\"name\"],\n  aliases: [\"JSX\"],\n  fields: {\n    name: {\n      validate: assertValueType(\"string\"),\n    },\n  },\n});\n\ndefineType(\"JSXMemberExpression\", {\n  visitor: [\"object\", \"property\"],\n  aliases: [\"JSX\"],\n  fields: {\n    object: {\n      validate: assertNodeType(\"JSXMemberExpression\", \"JSXIdentifier\"),\n    },\n    property: {\n      validate: assertNodeType(\"JSXIdentifier\"),\n    },\n  },\n});\n\ndefineType(\"JSXNamespacedName\", {\n  visitor: [\"namespace\", \"name\"],\n  aliases: [\"JSX\"],\n  fields: {\n    namespace: {\n      validate: assertNodeType(\"JSXIdentifier\"),\n    },\n    name: {\n      validate: assertNodeType(\"JSXIdentifier\"),\n    },\n  },\n});\n\ndefineType(\"JSXOpeningElement\", {\n  builder: [\"name\", \"attributes\", \"selfClosing\"],\n  visitor: [\"name\", \"attributes\"],\n  aliases: [\"JSX\", \"Immutable\"],\n  fields: {\n    name: {\n      validate: assertNodeType(\"JSXIdentifier\", \"JSXMemberExpression\"),\n    },\n    selfClosing: {\n      default: false,\n      validate: assertValueType(\"boolean\"),\n    },\n    attributes: {\n      validate: chain(\n        assertValueType(\"array\"),\n        assertEach(assertNodeType(\"JSXAttribute\", \"JSXSpreadAttribute\")),\n      ),\n    },\n    typeParameters: {\n      validate: assertNodeType(\n        \"TypeParameterInstantiation\",\n        \"TSTypeParameterInstantiation\",\n      ),\n      optional: true,\n    },\n  },\n});\n\ndefineType(\"JSXSpreadAttribute\", {\n  visitor: [\"argument\"],\n  aliases: [\"JSX\"],\n  fields: {\n    argument: {\n      validate: assertNodeType(\"Expression\"),\n    },\n  },\n});\n\ndefineType(\"JSXText\", {\n  aliases: [\"JSX\", \"Immutable\"],\n  builder: [\"value\"],\n  fields: {\n    value: {\n      validate: assertValueType(\"string\"),\n    },\n  },\n});\n\ndefineType(\"JSXFragment\", {\n  builder: [\"openingFragment\", \"closingFragment\", \"children\"],\n  visitor: [\"openingFragment\", \"children\", \"closingFragment\"],\n  aliases: [\"JSX\", \"Immutable\", \"Expression\"],\n  fields: {\n    openingFragment: {\n      validate: assertNodeType(\"JSXOpeningFragment\"),\n    },\n    closingFragment: {\n      validate: assertNodeType(\"JSXClosingFragment\"),\n    },\n    children: {\n      validate: chain(\n        assertValueType(\"array\"),\n        assertEach(\n          assertNodeType(\n            \"JSXText\",\n            \"JSXExpressionContainer\",\n            \"JSXSpreadChild\",\n            \"JSXElement\",\n            \"JSXFragment\",\n          ),\n        ),\n      ),\n    },\n  },\n});\n\ndefineType(\"JSXOpeningFragment\", {\n  aliases: [\"JSX\", \"Immutable\"],\n});\n\ndefineType(\"JSXClosingFragment\", {\n  aliases: [\"JSX\", \"Immutable\"],\n});\n","// @flow\nimport defineType, {\n  assertEach,\n  assertNodeType,\n  assertValueType,\n  chain,\n} from \"./utils\";\nimport {\n  classMethodOrPropertyCommon,\n  classMethodOrDeclareMethodCommon,\n} from \"./es2015\";\n\ndefineType(\"ArgumentPlaceholder\", {});\n\ndefineType(\"AwaitExpression\", {\n  builder: [\"argument\"],\n  visitor: [\"argument\"],\n  aliases: [\"Expression\", \"Terminatorless\"],\n  fields: {\n    argument: {\n      validate: assertNodeType(\"Expression\"),\n    },\n  },\n});\n\ndefineType(\"BindExpression\", {\n  visitor: [\"object\", \"callee\"],\n  aliases: [\"Expression\"],\n  fields: {\n    // todo\n  },\n});\n\ndefineType(\"ClassProperty\", {\n  visitor: [\"key\", \"value\", \"typeAnnotation\", \"decorators\"],\n  builder: [\"key\", \"value\", \"typeAnnotation\", \"decorators\", \"computed\"],\n  aliases: [\"Property\"],\n  fields: {\n    ...classMethodOrPropertyCommon,\n    value: {\n      validate: assertNodeType(\"Expression\"),\n      optional: true,\n    },\n    definite: {\n      validate: assertValueType(\"boolean\"),\n      optional: true,\n    },\n    typeAnnotation: {\n      validate: assertNodeType(\"TypeAnnotation\", \"TSTypeAnnotation\", \"Noop\"),\n      optional: true,\n    },\n    decorators: {\n      validate: chain(\n        assertValueType(\"array\"),\n        assertEach(assertNodeType(\"Decorator\")),\n      ),\n      optional: true,\n    },\n    readonly: {\n      validate: assertValueType(\"boolean\"),\n      optional: true,\n    },\n  },\n});\n\ndefineType(\"OptionalMemberExpression\", {\n  builder: [\"object\", \"property\", \"computed\", \"optional\"],\n  visitor: [\"object\", \"property\"],\n  aliases: [\"Expression\"],\n  fields: {\n    object: {\n      validate: assertNodeType(\"Expression\"),\n    },\n    property: {\n      validate: (function() {\n        const normal = assertNodeType(\"Identifier\");\n        const computed = assertNodeType(\"Expression\");\n\n        return function(node, key, val) {\n          const validator = node.computed ? computed : normal;\n          validator(node, key, val);\n        };\n      })(),\n    },\n    computed: {\n      default: false,\n    },\n    optional: {\n      validate: assertValueType(\"boolean\"),\n    },\n  },\n});\n\ndefineType(\"PipelineTopicExpression\", {\n  builder: [\"expression\"],\n  visitor: [\"expression\"],\n  fields: {\n    expression: {\n      validate: assertNodeType(\"Expression\"),\n    },\n  },\n});\n\ndefineType(\"PipelineBareFunction\", {\n  builder: [\"callee\"],\n  visitor: [\"callee\"],\n  fields: {\n    callee: {\n      validate: assertNodeType(\"Expression\"),\n    },\n  },\n});\n\ndefineType(\"PipelinePrimaryTopicReference\", {\n  aliases: [\"Expression\"],\n});\n\ndefineType(\"OptionalCallExpression\", {\n  visitor: [\"callee\", \"arguments\", \"typeParameters\", \"typeArguments\"],\n  builder: [\"callee\", \"arguments\", \"optional\"],\n  aliases: [\"Expression\"],\n  fields: {\n    callee: {\n      validate: assertNodeType(\"Expression\"),\n    },\n    arguments: {\n      validate: chain(\n        assertValueType(\"array\"),\n        assertEach(\n          assertNodeType(\"Expression\", \"SpreadElement\", \"JSXNamespacedName\"),\n        ),\n      ),\n    },\n    optional: {\n      validate: assertValueType(\"boolean\"),\n    },\n    typeArguments: {\n      validate: assertNodeType(\"TypeParameterInstantiation\"),\n      optional: true,\n    },\n    typeParameters: {\n      validate: assertNodeType(\"TSTypeParameterInstantiation\"),\n      optional: true,\n    },\n  },\n});\n\ndefineType(\"ClassPrivateProperty\", {\n  visitor: [\"key\", \"value\"],\n  builder: [\"key\", \"value\"],\n  aliases: [\"Property\", \"Private\"],\n  fields: {\n    key: {\n      validate: assertNodeType(\"PrivateName\"),\n    },\n    value: {\n      validate: assertNodeType(\"Expression\"),\n      optional: true,\n    },\n  },\n});\n\ndefineType(\"ClassPrivateMethod\", {\n  builder: [\"kind\", \"key\", \"params\", \"body\", \"static\"],\n  visitor: [\n    \"key\",\n    \"params\",\n    \"body\",\n    \"decorators\",\n    \"returnType\",\n    \"typeParameters\",\n  ],\n  aliases: [\n    \"Function\",\n    \"Scopable\",\n    \"BlockParent\",\n    \"FunctionParent\",\n    \"Method\",\n    \"Private\",\n  ],\n  fields: {\n    ...classMethodOrDeclareMethodCommon,\n    key: {\n      validate: assertNodeType(\"PrivateName\"),\n    },\n    body: {\n      validate: assertNodeType(\"BlockStatement\"),\n    },\n  },\n});\n\ndefineType(\"Import\", {\n  aliases: [\"Expression\"],\n});\n\ndefineType(\"Decorator\", {\n  visitor: [\"expression\"],\n  fields: {\n    expression: {\n      validate: assertNodeType(\"Expression\"),\n    },\n  },\n});\n\ndefineType(\"DoExpression\", {\n  visitor: [\"body\"],\n  aliases: [\"Expression\"],\n  fields: {\n    body: {\n      validate: assertNodeType(\"BlockStatement\"),\n    },\n  },\n});\n\ndefineType(\"ExportDefaultSpecifier\", {\n  visitor: [\"exported\"],\n  aliases: [\"ModuleSpecifier\"],\n  fields: {\n    exported: {\n      validate: assertNodeType(\"Identifier\"),\n    },\n  },\n});\n\ndefineType(\"ExportNamespaceSpecifier\", {\n  visitor: [\"exported\"],\n  aliases: [\"ModuleSpecifier\"],\n  fields: {\n    exported: {\n      validate: assertNodeType(\"Identifier\"),\n    },\n  },\n});\n\ndefineType(\"PrivateName\", {\n  visitor: [\"id\"],\n  aliases: [\"Private\"],\n  fields: {\n    id: {\n      validate: assertNodeType(\"Identifier\"),\n    },\n  },\n});\n\ndefineType(\"BigIntLiteral\", {\n  builder: [\"value\"],\n  fields: {\n    value: {\n      validate: assertValueType(\"string\"),\n    },\n  },\n  aliases: [\"Expression\", \"Pureish\", \"Literal\", \"Immutable\"],\n});\n","// @flow\nimport defineType, {\n  arrayOfType,\n  assertEach,\n  assertNodeType,\n  assertOneOf,\n  assertValueType,\n  chain,\n  validate,\n  validateArrayOfType,\n  validateOptional,\n  validateOptionalType,\n  validateType,\n} from \"./utils\";\nimport { functionDeclarationCommon } from \"./core\";\nimport { classMethodOrDeclareMethodCommon } from \"./es2015\";\n\nconst bool = assertValueType(\"boolean\");\n\nconst tSFunctionTypeAnnotationCommon = {\n  returnType: {\n    validate: assertNodeType(\"TSTypeAnnotation\", \"Noop\"),\n    optional: true,\n  },\n  typeParameters: {\n    validate: assertNodeType(\"TSTypeParameterDeclaration\", \"Noop\"),\n    optional: true,\n  },\n};\n\ndefineType(\"TSParameterProperty\", {\n  aliases: [\"LVal\"], // TODO: This isn't usable in general as an LVal. Should have a \"Parameter\" alias.\n  visitor: [\"parameter\"],\n  fields: {\n    accessibility: {\n      validate: assertOneOf(\"public\", \"private\", \"protected\"),\n      optional: true,\n    },\n    readonly: {\n      validate: assertValueType(\"boolean\"),\n      optional: true,\n    },\n    parameter: {\n      validate: assertNodeType(\"Identifier\", \"AssignmentPattern\"),\n    },\n  },\n});\n\ndefineType(\"TSDeclareFunction\", {\n  aliases: [\"Statement\", \"Declaration\"],\n  visitor: [\"id\", \"typeParameters\", \"params\", \"returnType\"],\n  fields: {\n    ...functionDeclarationCommon,\n    ...tSFunctionTypeAnnotationCommon,\n  },\n});\n\ndefineType(\"TSDeclareMethod\", {\n  visitor: [\"decorators\", \"key\", \"typeParameters\", \"params\", \"returnType\"],\n  fields: {\n    ...classMethodOrDeclareMethodCommon,\n    ...tSFunctionTypeAnnotationCommon,\n  },\n});\n\ndefineType(\"TSQualifiedName\", {\n  aliases: [\"TSEntityName\"],\n  visitor: [\"left\", \"right\"],\n  fields: {\n    left: validateType(\"TSEntityName\"),\n    right: validateType(\"Identifier\"),\n  },\n});\n\nconst signatureDeclarationCommon = {\n  typeParameters: validateOptionalType(\"TSTypeParameterDeclaration\"),\n  parameters: validateArrayOfType([\"Identifier\", \"RestElement\"]),\n  typeAnnotation: validateOptionalType(\"TSTypeAnnotation\"),\n};\n\nconst callConstructSignatureDeclaration = {\n  aliases: [\"TSTypeElement\"],\n  visitor: [\"typeParameters\", \"parameters\", \"typeAnnotation\"],\n  fields: signatureDeclarationCommon,\n};\n\ndefineType(\"TSCallSignatureDeclaration\", callConstructSignatureDeclaration);\ndefineType(\n  \"TSConstructSignatureDeclaration\",\n  callConstructSignatureDeclaration,\n);\n\nconst namedTypeElementCommon = {\n  key: validateType(\"Expression\"),\n  computed: validate(bool),\n  optional: validateOptional(bool),\n};\n\ndefineType(\"TSPropertySignature\", {\n  aliases: [\"TSTypeElement\"],\n  visitor: [\"key\", \"typeAnnotation\", \"initializer\"],\n  fields: {\n    ...namedTypeElementCommon,\n    readonly: validateOptional(bool),\n    typeAnnotation: validateOptionalType(\"TSTypeAnnotation\"),\n    initializer: validateOptionalType(\"Expression\"),\n  },\n});\n\ndefineType(\"TSMethodSignature\", {\n  aliases: [\"TSTypeElement\"],\n  visitor: [\"key\", \"typeParameters\", \"parameters\", \"typeAnnotation\"],\n  fields: {\n    ...signatureDeclarationCommon,\n    ...namedTypeElementCommon,\n  },\n});\n\ndefineType(\"TSIndexSignature\", {\n  aliases: [\"TSTypeElement\"],\n  visitor: [\"parameters\", \"typeAnnotation\"],\n  fields: {\n    readonly: validateOptional(bool),\n    parameters: validateArrayOfType(\"Identifier\"), // Length must be 1\n    typeAnnotation: validateOptionalType(\"TSTypeAnnotation\"),\n  },\n});\n\nconst tsKeywordTypes = [\n  \"TSAnyKeyword\",\n  \"TSUnknownKeyword\",\n  \"TSNumberKeyword\",\n  \"TSObjectKeyword\",\n  \"TSBooleanKeyword\",\n  \"TSStringKeyword\",\n  \"TSSymbolKeyword\",\n  \"TSVoidKeyword\",\n  \"TSUndefinedKeyword\",\n  \"TSNullKeyword\",\n  \"TSNeverKeyword\",\n];\n\nfor (const type of tsKeywordTypes) {\n  defineType(type, {\n    aliases: [\"TSType\"],\n    visitor: [],\n    fields: {},\n  });\n}\n\ndefineType(\"TSThisType\", {\n  aliases: [\"TSType\"],\n  visitor: [],\n  fields: {},\n});\n\nconst fnOrCtr = {\n  aliases: [\"TSType\"],\n  visitor: [\"typeParameters\", \"parameters\", \"typeAnnotation\"],\n  fields: signatureDeclarationCommon,\n};\n\ndefineType(\"TSFunctionType\", fnOrCtr);\ndefineType(\"TSConstructorType\", fnOrCtr);\n\ndefineType(\"TSTypeReference\", {\n  aliases: [\"TSType\"],\n  visitor: [\"typeName\", \"typeParameters\"],\n  fields: {\n    typeName: validateType(\"TSEntityName\"),\n    typeParameters: validateOptionalType(\"TSTypeParameterInstantiation\"),\n  },\n});\n\ndefineType(\"TSTypePredicate\", {\n  aliases: [\"TSType\"],\n  visitor: [\"parameterName\", \"typeAnnotation\"],\n  fields: {\n    parameterName: validateType([\"Identifier\", \"TSThisType\"]),\n    typeAnnotation: validateType(\"TSTypeAnnotation\"),\n  },\n});\n\ndefineType(\"TSTypeQuery\", {\n  aliases: [\"TSType\"],\n  visitor: [\"exprName\"],\n  fields: {\n    exprName: validateType([\"TSEntityName\", \"TSImportType\"]),\n  },\n});\n\ndefineType(\"TSTypeLiteral\", {\n  aliases: [\"TSType\"],\n  visitor: [\"members\"],\n  fields: {\n    members: validateArrayOfType(\"TSTypeElement\"),\n  },\n});\n\ndefineType(\"TSArrayType\", {\n  aliases: [\"TSType\"],\n  visitor: [\"elementType\"],\n  fields: {\n    elementType: validateType(\"TSType\"),\n  },\n});\n\ndefineType(\"TSTupleType\", {\n  aliases: [\"TSType\"],\n  visitor: [\"elementTypes\"],\n  fields: {\n    elementTypes: validateArrayOfType(\"TSType\"),\n  },\n});\n\ndefineType(\"TSOptionalType\", {\n  aliases: [\"TSType\"],\n  visitor: [\"typeAnnotation\"],\n  fields: {\n    typeAnnotation: validateType(\"TSType\"),\n  },\n});\n\ndefineType(\"TSRestType\", {\n  aliases: [\"TSType\"],\n  visitor: [\"typeAnnotation\"],\n  fields: {\n    typeAnnotation: validateType(\"TSType\"),\n  },\n});\n\nconst unionOrIntersection = {\n  aliases: [\"TSType\"],\n  visitor: [\"types\"],\n  fields: {\n    types: validateArrayOfType(\"TSType\"),\n  },\n};\n\ndefineType(\"TSUnionType\", unionOrIntersection);\ndefineType(\"TSIntersectionType\", unionOrIntersection);\n\ndefineType(\"TSConditionalType\", {\n  aliases: [\"TSType\"],\n  visitor: [\"checkType\", \"extendsType\", \"trueType\", \"falseType\"],\n  fields: {\n    checkType: validateType(\"TSType\"),\n    extendsType: validateType(\"TSType\"),\n    trueType: validateType(\"TSType\"),\n    falseType: validateType(\"TSType\"),\n  },\n});\n\ndefineType(\"TSInferType\", {\n  aliases: [\"TSType\"],\n  visitor: [\"typeParameter\"],\n  fields: {\n    typeParameter: validateType(\"TSTypeParameter\"),\n  },\n});\n\ndefineType(\"TSParenthesizedType\", {\n  aliases: [\"TSType\"],\n  visitor: [\"typeAnnotation\"],\n  fields: {\n    typeAnnotation: validateType(\"TSType\"),\n  },\n});\n\ndefineType(\"TSTypeOperator\", {\n  aliases: [\"TSType\"],\n  visitor: [\"typeAnnotation\"],\n  fields: {\n    operator: validate(assertValueType(\"string\")),\n    typeAnnotation: validateType(\"TSType\"),\n  },\n});\n\ndefineType(\"TSIndexedAccessType\", {\n  aliases: [\"TSType\"],\n  visitor: [\"objectType\", \"indexType\"],\n  fields: {\n    objectType: validateType(\"TSType\"),\n    indexType: validateType(\"TSType\"),\n  },\n});\n\ndefineType(\"TSMappedType\", {\n  aliases: [\"TSType\"],\n  visitor: [\"typeParameter\", \"typeAnnotation\"],\n  fields: {\n    readonly: validateOptional(bool),\n    typeParameter: validateType(\"TSTypeParameter\"),\n    optional: validateOptional(bool),\n    typeAnnotation: validateOptionalType(\"TSType\"),\n  },\n});\n\ndefineType(\"TSLiteralType\", {\n  aliases: [\"TSType\"],\n  visitor: [\"literal\"],\n  fields: {\n    literal: validateType([\n      \"NumericLiteral\",\n      \"StringLiteral\",\n      \"BooleanLiteral\",\n    ]),\n  },\n});\n\ndefineType(\"TSExpressionWithTypeArguments\", {\n  aliases: [\"TSType\"],\n  visitor: [\"expression\", \"typeParameters\"],\n  fields: {\n    expression: validateType(\"TSEntityName\"),\n    typeParameters: validateOptionalType(\"TSTypeParameterInstantiation\"),\n  },\n});\n\ndefineType(\"TSInterfaceDeclaration\", {\n  // \"Statement\" alias prevents a semicolon from appearing after it in an export declaration.\n  aliases: [\"Statement\", \"Declaration\"],\n  visitor: [\"id\", \"typeParameters\", \"extends\", \"body\"],\n  fields: {\n    declare: validateOptional(bool),\n    id: validateType(\"Identifier\"),\n    typeParameters: validateOptionalType(\"TSTypeParameterDeclaration\"),\n    extends: validateOptional(arrayOfType(\"TSExpressionWithTypeArguments\")),\n    body: validateType(\"TSInterfaceBody\"),\n  },\n});\n\ndefineType(\"TSInterfaceBody\", {\n  visitor: [\"body\"],\n  fields: {\n    body: validateArrayOfType(\"TSTypeElement\"),\n  },\n});\n\ndefineType(\"TSTypeAliasDeclaration\", {\n  aliases: [\"Statement\", \"Declaration\"],\n  visitor: [\"id\", \"typeParameters\", \"typeAnnotation\"],\n  fields: {\n    declare: validateOptional(bool),\n    id: validateType(\"Identifier\"),\n    typeParameters: validateOptionalType(\"TSTypeParameterDeclaration\"),\n    typeAnnotation: validateType(\"TSType\"),\n  },\n});\n\ndefineType(\"TSAsExpression\", {\n  aliases: [\"Expression\"],\n  visitor: [\"expression\", \"typeAnnotation\"],\n  fields: {\n    expression: validateType(\"Expression\"),\n    typeAnnotation: validateType(\"TSType\"),\n  },\n});\n\ndefineType(\"TSTypeAssertion\", {\n  aliases: [\"Expression\"],\n  visitor: [\"typeAnnotation\", \"expression\"],\n  fields: {\n    typeAnnotation: validateType(\"TSType\"),\n    expression: validateType(\"Expression\"),\n  },\n});\n\ndefineType(\"TSEnumDeclaration\", {\n  // \"Statement\" alias prevents a semicolon from appearing after it in an export declaration.\n  aliases: [\"Statement\", \"Declaration\"],\n  visitor: [\"id\", \"members\"],\n  fields: {\n    declare: validateOptional(bool),\n    const: validateOptional(bool),\n    id: validateType(\"Identifier\"),\n    members: validateArrayOfType(\"TSEnumMember\"),\n    initializer: validateOptionalType(\"Expression\"),\n  },\n});\n\ndefineType(\"TSEnumMember\", {\n  visitor: [\"id\", \"initializer\"],\n  fields: {\n    id: validateType([\"Identifier\", \"StringLiteral\"]),\n    initializer: validateOptionalType(\"Expression\"),\n  },\n});\n\ndefineType(\"TSModuleDeclaration\", {\n  aliases: [\"Statement\", \"Declaration\"],\n  visitor: [\"id\", \"body\"],\n  fields: {\n    declare: validateOptional(bool),\n    global: validateOptional(bool),\n    id: validateType([\"Identifier\", \"StringLiteral\"]),\n    body: validateType([\"TSModuleBlock\", \"TSModuleDeclaration\"]),\n  },\n});\n\ndefineType(\"TSModuleBlock\", {\n  visitor: [\"body\"],\n  fields: {\n    body: validateArrayOfType(\"Statement\"),\n  },\n});\n\ndefineType(\"TSImportType\", {\n  aliases: [\"TSType\"],\n  visitor: [\"argument\", \"qualifier\", \"typeParameters\"],\n  fields: {\n    argument: validateType(\"StringLiteral\"),\n    qualifier: validateOptionalType(\"TSEntityName\"),\n    typeParameters: validateOptionalType(\"TSTypeParameterInstantiation\"),\n  },\n});\n\ndefineType(\"TSImportEqualsDeclaration\", {\n  aliases: [\"Statement\"],\n  visitor: [\"id\", \"moduleReference\"],\n  fields: {\n    isExport: validate(bool),\n    id: validateType(\"Identifier\"),\n    moduleReference: validateType([\n      \"TSEntityName\",\n      \"TSExternalModuleReference\",\n    ]),\n  },\n});\n\ndefineType(\"TSExternalModuleReference\", {\n  visitor: [\"expression\"],\n  fields: {\n    expression: validateType(\"StringLiteral\"),\n  },\n});\n\ndefineType(\"TSNonNullExpression\", {\n  aliases: [\"Expression\"],\n  visitor: [\"expression\"],\n  fields: {\n    expression: validateType(\"Expression\"),\n  },\n});\n\ndefineType(\"TSExportAssignment\", {\n  aliases: [\"Statement\"],\n  visitor: [\"expression\"],\n  fields: {\n    expression: validateType(\"Expression\"),\n  },\n});\n\ndefineType(\"TSNamespaceExportDeclaration\", {\n  aliases: [\"Statement\"],\n  visitor: [\"id\"],\n  fields: {\n    id: validateType(\"Identifier\"),\n  },\n});\n\ndefineType(\"TSTypeAnnotation\", {\n  visitor: [\"typeAnnotation\"],\n  fields: {\n    typeAnnotation: {\n      validate: assertNodeType(\"TSType\"),\n    },\n  },\n});\n\ndefineType(\"TSTypeParameterInstantiation\", {\n  visitor: [\"params\"],\n  fields: {\n    params: {\n      validate: chain(\n        assertValueType(\"array\"),\n        assertEach(assertNodeType(\"TSType\")),\n      ),\n    },\n  },\n});\n\ndefineType(\"TSTypeParameterDeclaration\", {\n  visitor: [\"params\"],\n  fields: {\n    params: {\n      validate: chain(\n        assertValueType(\"array\"),\n        assertEach(assertNodeType(\"TSTypeParameter\")),\n      ),\n    },\n  },\n});\n\ndefineType(\"TSTypeParameter\", {\n  visitor: [\"constraint\", \"default\"],\n  fields: {\n    name: {\n      validate: assertValueType(\"string\"),\n    },\n    constraint: {\n      validate: assertNodeType(\"TSType\"),\n      optional: true,\n    },\n    default: {\n      validate: assertNodeType(\"TSType\"),\n      optional: true,\n    },\n  },\n});\n","// @flow\nimport './core';\nimport './es2015';\nimport './flow';\nimport './jsx';\nimport './experimental';\nimport './typescript';\n\nimport { BUILDER_KEYS } from './utils';\n\nexport default BUILDER_KEYS;","import definitions from './definitions';\n\nexport function generateBabelTypeCode(node) {\n  const parameters = definitions[node.type];\n  const camelCaseType = node.type[0].toLowerCase() + node.type.slice(1);\n\n  const args = [];\n  for (const param of parameters) {\n    const argValue = node[param];\n    if (argValue !== undefined) {\n      if (Array.isArray(argValue)) {\n        args.push(\n          '[' +\n            argValue.map(item => generateBabelTypeCode(item)).join(', ') +\n            ']'\n        );\n      } else if (isNodeType(argValue)) {\n        args.push(generateBabelTypeCode(argValue));\n      } else {\n        args.push(JSON.stringify(argValue));\n      }\n    } else {\n      break;\n    }\n  }\n\n  return `t.${camelCaseType}(${args.join(', ')})`;\n}\n\nfunction isNodeType(node) {\n  return node && typeof node.type === 'string';\n}\n","/* eslint-disable import/no-webpack-loader-syntax, no-new-func */\n\nexport function parse(\n  code,\n  { customParser, pluginOptions = [], version = '7.4.5' }\n) {\n  if (customParser && typeof customParser.parse === 'function') {\n    return Promise.resolve(\n      customParser.parse(code, {\n        plugins: pushToPlugins([], pluginOptions),\n      })\n    );\n  }\n\n  return getBabel(version).then(\n    babel =>\n      babel.transform(code, {\n        ast: true,\n        plugins: [\n          function() {\n            return {\n              manipulateOptions(opts, parserOpts) {\n                pushToPlugins(parserOpts.plugins, pluginOptions);\n              },\n            };\n          },\n        ],\n      }).ast\n  );\n}\n\nfunction pushToPlugins(plugins, pluginOptions) {\n  for (const parserOption in pluginOptions) {\n    const option = pluginOptions[parserOption];\n    if (option && option.enabled) {\n      if (option.options) {\n        plugins.push([parserOption, option.options]);\n      } else {\n        plugins.push(parserOption);\n      }\n    }\n  }\n  return plugins;\n}\n\nconst babel = {};\nconst babelScripts = require('./versions/versions');\nasync function getBabel(version) {\n  if (babel[version] !== undefined) {\n    return babel[version];\n  }\n  const babelScriptsUrl = babelScripts[version];\n  let response = await fetch(babelScriptsUrl);\n  let script = await response.text();\n  const exports = {};\n  new Function('exports', script)(exports);\n  // clean up\n  script = undefined;\n  response = undefined;\n  return (babel[version] = exports.Babel);\n}\n","import * as versions from './versions/versions';\n\nexport const babelVersions = Object.keys(versions);\n\nexport * from './codegen';\nexport * from './parser';\n","import { useEffect } from 'react';\n\nexport function getQueryParams() {\n  return parseQueryParams(document.location.hash);\n}\n\nexport function useQueryParams(state) {\n  useEffect(() => {\n    window.history.replaceState({}, '', '#' + toQueryParams(state));\n  }, Object.values(state));\n}\n\nfunction parseQueryParams(query) {\n  try {\n    return JSON.parse(\n      decodeURIComponent(escape(window.atob(query.replace('#?', ''))))\n    );\n  } catch (e) {\n    return {};\n  }\n}\n\nfunction toQueryParams(obj) {\n  return '?' + window.btoa(unescape(encodeURIComponent(JSON.stringify(obj))));\n}\n","import React, {\n  useState,\n  useReducer,\n  useContext,\n  useEffect,\n  useRef,\n} from 'react';\nimport styles from './style.scss';\nimport { Checkbox } from 'antd';\nimport cx from 'classnames';\nimport { Tooltip, Typography } from 'antd';\nimport { generateBabelTypeCode } from '../../utils/babel';\n\nconst initialAstState = {\n  hideEmpty: false,\n  hideLocation: false,\n  hideType: false,\n};\nconst ASTContext = React.createContext(initialAstState);\nconst astStateReducer = (state, action) => {\n  return {\n    ...state,\n    [action]: !state[action],\n  };\n};\n\nconst MarkerContext = React.createContext(() => {});\nconst SelectedNodeContext = React.createContext([0, 0]);\n\nexport default React.memo(ASTreeViewer);\nfunction ASTreeViewer({\n  data,\n  setMarker,\n  selectedNode,\n  selectedNodePath,\n  treeSettings,\n  toggleTreeSettings,\n}) {\n  return (\n    <ASTContext.Provider value={treeSettings}>\n      <MarkerContext.Provider value={setMarker}>\n        <SelectedNodeContext.Provider value={selectedNode}>\n          <div className={styles.options}>\n            <Checkbox\n              checked={treeSettings['hideEmpty']}\n              onChange={() => toggleTreeSettings('hideEmpty')}\n            >\n              Hide empty keys\n            </Checkbox>\n            <Checkbox\n              checked={treeSettings['hideLocation']}\n              onChange={() => toggleTreeSettings('hideLocation')}\n            >\n              Hide location data\n            </Checkbox>\n            <Checkbox\n              checked={treeSettings['hideType']}\n              onChange={() => toggleTreeSettings('hideType')}\n            >\n              Hide type keys\n            </Checkbox>\n          </div>\n          <div className={styles.treeContainer}>\n            <JSONObject data={data} root={true} />\n          </div>\n          {selectedNodePath && (\n            <div className={styles.footer}>\n              {selectedNodePath.map((path, i) => (\n                <FooterItem\n                  key={i}\n                  value={path}\n                  onMouseOver={() => setMarker(path.loc)}\n                  onMouseLeave={() => setMarker(null)}\n                />\n              ))}\n            </div>\n          )}\n        </SelectedNodeContext.Provider>\n      </MarkerContext.Provider>\n    </ASTContext.Provider>\n  );\n}\n\nfunction getExpandable(data) {\n  return (\n    !!data &&\n    typeof data === 'object' &&\n    (Array.isArray(data) ? data.length > 0 : true)\n  );\n}\n\nfunction getComponent(data) {\n  switch (typeof data) {\n    case 'object':\n      if (Array.isArray(data)) {\n        return JSONArray;\n      } else if (data === null) {\n        return JSONNull;\n      } else {\n        return JSONObject;\n      }\n    case 'number':\n      return JSONNumber;\n    case 'string':\n      return JSONString;\n    case 'boolean':\n      return JSONBoolean;\n    default:\n      return JSONUnknown;\n  }\n}\n\nfunction JSONNumber({ data }) {\n  return <span className={styles.number}>{data}</span>;\n}\n\nfunction JSONString({ data }) {\n  return <span className={styles.string}>{'\"' + data + '\"'}</span>;\n}\n\nfunction JSONObject({ data, expand, root, onToggleExpand }) {\n  const [rootExpand, setRootExpand] = useState(true);\n  const toggleRootExpand = () => setRootExpand(_ => !_);\n\n  const shouldExpand = root ? rootExpand : expand;\n  const toggleExpand = root ? toggleRootExpand : onToggleExpand;\n\n  const keys = Object.keys(data);\n\n  const astState = useContext(ASTContext);\n\n  const copyable = {\n    get text() {\n      return generateBabelTypeCode(data);\n    },\n  };\n\n  return (\n    <>\n      {root && (\n        <ExpandToggle expand={shouldExpand} toggleExpand={toggleRootExpand} />\n      )}\n      {data.type && (\n        <Tooltip\n          title={\n            <>\n              <Typography.Text copyable className={styles.tooltipText}>\n                {data.type}\n              </Typography.Text>\n              <br />\n              <Typography.Text\n                copyable={copyable}\n                className={styles.tooltipText}\n              >\n                @babel/types\n              </Typography.Text>\n            </>\n          }\n          trigger=\"contextMenu\"\n        >\n          <span className={styles.nodeType} onClick={toggleExpand}>\n            {data.type}\n          </span>\n        </Tooltip>\n      )}\n      <span className={cx(styles.openingBracket, styles.bracket)}>{'{'}</span>\n\n      {!shouldExpand && <PreviewObject data={keys} onClick={toggleExpand} />}\n\n      <div className={cx(styles.child, !shouldExpand && styles.hidden)}>\n        {keys.map(key =>\n          (astState.hideLocation && ['loc', 'start', 'end'].includes(key)) ||\n          (astState.hideEmpty && data[key] === null) ||\n          (astState.hideType && key === 'type') ? null : (\n            <JSONItem key={key} name={key} value={data[key]} />\n          )\n        )}\n      </div>\n\n      <span className={styles.bracket}>{'}'}</span>\n    </>\n  );\n}\n\nfunction JSONItem({ name, value }) {\n  const [expand, setExpand] = useState(true);\n  const toggleExpand = () => setExpand(_ => !_);\n\n  const Component = getComponent(value);\n  const isExpandable = getExpandable(value);\n\n  const selectedNode = useContext(SelectedNodeContext);\n  const isSelected = selectedNode === value;\n\n  const setMarker = useContext(MarkerContext);\n\n  return (\n    <Highlightable\n      highlighted={isSelected}\n      onMouseOver={event => {\n        if (value && value.loc) {\n          event.stopPropagation();\n          setMarker(value.loc);\n        }\n      }}\n      onMouseLeave={() => {\n        setMarker(null);\n      }}\n    >\n      {!!isExpandable && (\n        <ExpandToggle expand={expand} toggleExpand={toggleExpand} />\n      )}\n      <span\n        className={cx(styles.key, isExpandable ? styles.expandableKey : null)}\n        onClick={toggleExpand}\n      >\n        {name}\n      </span>\n      <span className={styles.colon}>{':'}</span>\n      <span className={styles.value}>\n        {isExpandable ? (\n          <Component\n            data={value}\n            expand={expand}\n            onToggleExpand={toggleExpand}\n          />\n        ) : (\n          <Component data={value} />\n        )}\n      </span>\n    </Highlightable>\n  );\n}\n\nfunction PreviewObject({ data, onClick }) {\n  return (\n    <span className={styles.preview} onClick={onClick}>\n      {data.slice(0, 3).join(', ') +\n        (data.length > 3 ? `... +${data.length - 3}` : '')}\n    </span>\n  );\n}\n\nfunction JSONArray({ data, expand, onToggleExpand }) {\n  const selectedNode = useContext(SelectedNodeContext);\n  const setMarker = useContext(MarkerContext);\n\n  return (\n    <>\n      <span className={cx(styles.openingBracket, styles.bracket)}>{'['}</span>\n\n      {data.length > 0 && (\n        <>\n          {!expand && <PreviewArray data={data} onClick={onToggleExpand} />}\n          <div className={cx(styles.child, !expand && styles.hidden)}>\n            {data.map((datum, idx) => {\n              const Component = getComponent(datum);\n              const isSelected = selectedNode === datum;\n\n              return (\n                <Highlightable\n                  key={idx}\n                  highlighted={isSelected}\n                  onMouseOver={event => {\n                    event.stopPropagation();\n                    setMarker(datum.loc);\n                  }}\n                  onMouseLeave={() => {\n                    setMarker(null);\n                  }}\n                >\n                  <Component data={datum} root={true} />\n                </Highlightable>\n              );\n            })}\n          </div>\n        </>\n      )}\n      <span className={styles.bracket}>{']'}</span>\n    </>\n  );\n}\n\nfunction PreviewArray({ data, onClick }) {\n  return (\n    <span className={styles.preview} onClick={onClick}>\n      {`${data.length} element${data.length > 1 ? 's' : ''}`}\n    </span>\n  );\n}\n\nfunction JSONNull() {\n  return <span className={styles.null}>null</span>;\n}\n\nfunction JSONBoolean({ data }) {\n  return <span className={styles.boolean}>{JSON.stringify(data)}</span>;\n}\n\nfunction JSONUnknown() {\n  return null;\n}\n\nfunction ExpandToggle({ expand, toggleExpand }) {\n  return (\n    <span className={styles.expandToggle} onClick={toggleExpand}>\n      {expand ? '-' : '+'}\n    </span>\n  );\n}\n\nfunction Highlightable({ highlighted, onMouseOver, onMouseLeave, children }) {\n  const ref = useHighlight(highlighted);\n  return (\n    <div\n      ref={ref}\n      className={cx(highlighted && styles.highlighted)}\n      onMouseOver={onMouseOver}\n      onMouseLeave={onMouseLeave}\n    >\n      {children}\n    </div>\n  );\n}\n\nfunction useHighlight(highlighted) {\n  const ref = useRef(null);\n  useEffect(() => {\n    if (ref && highlighted) {\n      ref.current.scrollIntoView(true);\n    }\n  }, [highlighted]);\n  return ref;\n}\n\nfunction FooterItem({ value, onMouseOver, onMouseLeave }) {\n  return (\n    <Tooltip\n      title={\n        <>\n          <Typography.Text copyable className={styles.tooltipText}>\n            {value.node.type}\n          </Typography.Text>\n          {!!value.keyPath && (\n            <div>\n              <Typography.Text copyable className={styles.tooltipText}>\n                {value.keyPath}\n              </Typography.Text>\n            </div>\n          )}\n        </>\n      }\n      trigger=\"click\"\n    >\n      <span\n        onMouseOver={onMouseOver}\n        onMouseLeave={onMouseLeave}\n        className={styles.footerItem}\n      >\n        <span className={styles.footerItemPath}>\n          {value.key ? `.${value.key}` : ''}\n        </span>\n        {` ${value.node.type}`}\n      </span>\n    </Tooltip>\n  );\n}\n\nfunction urlParamsStateToInitialState(initialStateFromUrlParams) {\n  return {\n    hideEmpty: initialStateFromUrlParams.hideEmpty !== false,\n    hideLocation: initialStateFromUrlParams.hideLocation !== false,\n    hideType: initialStateFromUrlParams.hideType !== false,\n  };\n}\n\nexport function useTreeSettings(initialStateFromUrlParams) {\n  return useReducer(\n    astStateReducer,\n    initialStateFromUrlParams,\n    urlParamsStateToInitialState\n  );\n}\n","export const BABEL_CONFIG_MAP = [\n  { value: 'jsx' },\n  { value: 'flow' },\n  { value: 'typescript' },\n  {\n    value: 'bigInt',\n  },\n  {\n    value: 'classProperties',\n  },\n  {\n    value: 'classPrivateProperties',\n  },\n  {\n    value: 'classPrivateMethods',\n  },\n  {\n    value: 'decorators-legacy',\n    options: [{ key: 'decoratorsBeforeExport', type: 'boolean' }],\n  },\n  {\n    value: 'decorators',\n    options: [{ key: 'decoratorsBeforeExport', type: 'boolean' }],\n  },\n  {\n    value: 'doExpressions',\n  },\n  {\n    value: 'dynamicImport',\n  },\n  { value: 'exportDefaultFrom' },\n  { value: 'nullishCoalescingOperator' },\n  { value: 'numericSeparator' },\n  { value: 'objectRestSpread' },\n  { value: 'optionalChaining' },\n  { value: 'optionalCatchBinding' },\n  {\n    value: 'partialApplication',\n  },\n  {\n    value: 'pipelineOperator',\n    options: [\n      { key: 'proposal', type: 'enum', value: ['minimal', 'smart', 'fsharp'] },\n    ],\n  },\n  { value: 'throwExpressions' },\n];\n\nconst hasOptionsMap = BABEL_CONFIG_MAP.reduce((map, value) => {\n  map[value.value] = value.options;\n  return map;\n}, {});\n\nexport const getOptionSettings = key => hasOptionsMap[key];\n","import React from 'react';\nimport { Tag } from 'antd';\nimport styles from './Tags.module.scss';\n\nfunction Tags({ settings, onClick }) {\n  const enabledSettings = Object.keys(settings).filter(\n    setting => settings[setting] && settings[setting].enabled\n  );\n\n  return (\n    <span className={styles.container}>\n      {enabledSettings.map(setting => (\n        <Tag key={setting} onClick={onClick}>\n          {setting}\n        </Tag>\n      ))}\n    </span>\n  );\n}\n\nexport default React.memo(Tags);\n","import React from 'react';\nimport styles from './DrawerFooter.module.scss';\n\nexport default function DrawerFooter() {\n  return (\n    <div className={styles.footer}>\n      {'Built with '}\n      <a href=\"https://reactjs.org/\" rel=\"noopener noreferrer\" target=\"_blank\">\n        React\n      </a>\n      {', '}\n      <a href=\"https://ant.design\" rel=\"noopener noreferrer\" target=\"_blank\">\n        Ant Design\n      </a>\n      {', '}\n      <a href=\"http://babeljs.io\" rel=\"noopener noreferrer\" target=\"_blank\">\n        Babel\n      </a>\n      {' and ❤| '}\n      <a\n        href=\"https://github.com/tanhauhau/babel-ast-explorer\"\n        rel=\"noopener noreferrer\"\n        target=\"_blank\"\n      >\n        Github\n      </a>\n    </div>\n  );\n}\n","/* eslint-disable no-new-func */\nexport function readFile(file) {\n  return new Promise((resolve, reject) => {\n    const reader = new FileReader();\n    reader.onload = function(event) {\n      resolve(event.target.result);\n    };\n    reader.onerror = function(error) {\n      reject(error);\n    };\n    reader.readAsText(file, 'utf-8');\n  });\n}\n\nexport async function getExportsFromFile(file) {\n  let content = await readFile(file);\n  const _exports = {};\n  new Function('exports', content)(_exports);\n  content = null;\n  _exports.name = file.name;\n  return _exports;\n}\n","import React, { useState, useCallback, useReducer } from 'react';\nimport { BABEL_CONFIG_MAP, getOptionSettings } from './utils';\nimport { Select, Checkbox, Drawer, Button, Upload, Icon } from 'antd';\nimport Tags from './components/Tags';\nimport DrawerFooter from './components/DrawerFooter';\nimport styles from './style.module.scss';\nimport { babelVersions as BABEL_VERSIONS } from '../../utils/babel';\nimport { getExportsFromFile } from '../../utils/file';\n\nfunction BabelSettings({ settings, onChangeSettings }) {\n  const [opened, setOpened] = useState(false);\n  const closeDrawer = useCallback(() => setOpened(false), [setOpened]);\n  const openDrawer = useCallback(() => setOpened(true), [setOpened]);\n  return (\n    <>\n      <div className={styles.topbar}>\n        <Button\n          type=\"primary\"\n          shape=\"circle\"\n          icon=\"setting\"\n          size=\"default\"\n          onClick={openDrawer}\n        />\n        <Tags settings={settings} onClick={openDrawer} />\n      </div>\n      <Drawer\n        title=\"Babel Settings\"\n        placement=\"left\"\n        closable={false}\n        onClose={closeDrawer}\n        visible={opened}\n        width={400}\n        className={styles.drawer}\n      >\n        {settings.customParser ? (\n          <Button\n            type=\"danger\"\n            onClick={() =>\n              onChangeSettings({\n                type: 'removeCustomParser',\n              })\n            }\n          >\n            <Icon type=\"delete\" theme=\"filled\" />\n            {'Custom parser: ' + settings.customParser.name}\n          </Button>\n        ) : (\n          <>\n            {'Babel version '}\n            <Select\n              value={settings.version}\n              onChange={version =>\n                onChangeSettings({ type: 'setVersion', version })\n              }\n            >\n              {BABEL_VERSIONS.map(value => (\n                <Select.Option value={value} key={value}>\n                  {value}\n                </Select.Option>\n              ))}\n            </Select>\n            <Upload\n              style={{ marginLeft: 8 }}\n              name=\"file\"\n              headers={{\n                authorization: 'authorization-text',\n              }}\n              showUploadList={false}\n              beforeUpload={file => {\n                getExportsFromFile(file).then(parser => {\n                  onChangeSettings({\n                    type: 'setCustomParser',\n                    customParser: parser,\n                  });\n                });\n                return false;\n              }}\n            >\n              <Button>\n                <Icon type=\"upload\" /> Custom parser\n              </Button>\n            </Upload>\n          </>\n        )}\n        {BABEL_CONFIG_MAP.map(({ value, options }) => {\n          const enabled = settings[value] && settings[value].enabled;\n          return (\n            <React.Fragment key={value}>\n              <Checkbox\n                checked={enabled}\n                onChange={event => {\n                  onChangeSettings({\n                    type: event.target.checked ? 'toggleOn' : 'toggleOff',\n                    value,\n                  });\n                }}\n              >\n                {value}\n              </Checkbox>\n\n              {options ? (\n                <div className={styles.options}>\n                  {options.map(option => {\n                    const selectedValue =\n                      settings[value] &&\n                      settings[value].options &&\n                      settings[value].options[option.key];\n\n                    switch (option.type) {\n                      case 'boolean':\n                        return (\n                          <div key={option.key}>\n                            <Checkbox\n                              disabled={!enabled}\n                              checked={selectedValue}\n                              onChange={event =>\n                                onChangeSettings({\n                                  type: 'setOption',\n                                  value,\n                                  option: option.key,\n                                  optionValue: event.target.checked,\n                                })\n                              }\n                            >\n                              {option.key}\n                            </Checkbox>\n                          </div>\n                        );\n                      case 'enum': {\n                        return (\n                          <Select\n                            key={option.key}\n                            value={selectedValue || option.value[0]}\n                            disabled={!enabled}\n                            onChange={optionValue =>\n                              onChangeSettings({\n                                type: 'setOption',\n                                value,\n                                option: option.key,\n                                optionValue,\n                              })\n                            }\n                          >\n                            {option.value.map(value => (\n                              <Select.Option value={value} key={value}>\n                                {value}\n                              </Select.Option>\n                            ))}\n                          </Select>\n                        );\n                      }\n                      default:\n                        return null;\n                    }\n                  })}\n                </div>\n              ) : null}\n            </React.Fragment>\n          );\n        })}\n        <DrawerFooter />\n      </Drawer>\n    </>\n  );\n}\n\nfunction babelSettingsReducer(state, action) {\n  switch (action.type) {\n    case 'toggleOn':\n      const options = getOptionSettings(action.value);\n      const updatedOption = {\n        options: {},\n        ...state[action.value],\n        enabled: true,\n      };\n      if (!!options) {\n        options.forEach(option => {\n          switch (option.type) {\n            case 'enum':\n              updatedOption.options[option.key] = option.value[0];\n              break;\n            case 'boolean':\n              updatedOption.options[option.key] = !!updatedOption.options[\n                option.key\n              ];\n              break;\n            default:\n          }\n        });\n      }\n      return {\n        ...state,\n        [action.value]: updatedOption,\n      };\n\n    case 'toggleOff':\n      return {\n        ...state,\n        [action.value]: {\n          ...state[action.value],\n          enabled: false,\n        },\n      };\n\n    case 'setOption':\n      return {\n        ...state,\n        [action.value]: {\n          ...state[action.value],\n          options: {\n            ...state[action.value].options,\n            [action.option]: action.optionValue,\n          },\n        },\n      };\n    case 'setVersion':\n      return {\n        ...state,\n        version: action.version,\n      };\n    case 'setCustomParser':\n      return {\n        ...state,\n        customParser: action.customParser,\n      };\n    case 'removeCustomParser':\n      return {\n        ...state,\n        customParser: undefined,\n      };\n    default:\n      return state;\n  }\n}\n\nexport function useBabelSettings(defaultSettings) {\n  return useReducer(babelSettingsReducer, defaultSettings);\n}\n\nexport default React.memo(BabelSettings);\n","import React, { useState, useCallback, useEffect } from 'react';\nimport * as babel from './utils/babel';\nimport { getQueryParams, useQueryParams } from './utils/url';\nimport ASTreeViewer, { useTreeSettings } from './components/ASTreeViewer';\nimport BabelSettings, { useBabelSettings } from './components/BabelSettings';\nimport AceEditor from 'react-ace';\nimport 'brace/mode/javascript';\nimport 'brace/theme/github';\nimport styles from './App.scss';\nimport { Spin } from 'antd';\nimport 'antd/dist/antd.css';\n\n// TODO: should be `useEffect(..., [])` to get query params\nconst urlState = getQueryParams();\nconst initialBabelSettings = urlState.babelSettings || { version: '7.6.0' };\n// NOTE: cleanup\nif (initialBabelSettings.customParser) {\n  delete initialBabelSettings.customParser;\n}\n\nconst initialCode = urlState.code || '';\nconst initialTreeSettings = urlState.treeSettings || '';\nconst EMPTY_AST = {};\n\nfunction App() {\n  const [babelSettings, updateBabelSettings] = useBabelSettings(\n    initialBabelSettings\n  );\n  console.log(babelSettings);\n  const [treeSettings, toggleTreeSettings] = useTreeSettings(\n    initialTreeSettings\n  );\n  const [code, ast, error, onCodeChange] = useBabel(initialCode, babelSettings);\n  const [marker, setMarker] = useMarker();\n  const [selectedNode, selectedNodePath, onCursorChange] = useCursor(ast);\n\n  useQueryParams({\n    babelSettings,\n    treeSettings,\n    code,\n  });\n\n  return (\n    <div className={styles.App}>\n      <div className={styles.codeContainer}>\n        <div className={styles.codeToolbar}>\n          <BabelSettings\n            settings={babelSettings}\n            onChangeSettings={updateBabelSettings}\n          />\n        </div>\n        <AceEditor\n          mode=\"javascript\"\n          theme=\"github\"\n          width=\"100%\"\n          height=\"100%\"\n          onChange={onCodeChange}\n          name=\"code\"\n          value={code}\n          showPrintMargin={false}\n          editorProps={{ $blockScrolling: true }}\n          setOptions={{ useWorker: false }}\n          markers={marker}\n          onCursorChange={onCursorChange}\n        />\n      </div>\n      <div className={styles.astContainer}>\n        {error ? (\n          <pre>{error.toString()}</pre>\n        ) : ast === EMPTY_AST ? (\n          <Spin />\n        ) : (\n          <ASTreeViewer\n            data={ast}\n            selectedNode={selectedNode}\n            selectedNodePath={selectedNodePath}\n            setMarker={setMarker}\n            treeSettings={treeSettings}\n            toggleTreeSettings={toggleTreeSettings}\n          />\n        )}\n      </div>\n    </div>\n  );\n}\n\nfunction useBabel(initialCode, babelOptions) {\n  const [value, setValue] = useState(initialCode);\n  const [error, setError] = useState(null);\n  const [ast, setAst] = useState(EMPTY_AST);\n  const onCodeChange = useCallback(value => setValue(value), [setValue]);\n  const debouncedValue = useDebounce(value, 500);\n  const debouncedOptions = useDebounce(babelOptions, 500);\n\n  useEffect(() => {\n    let cancel = false;\n    setAst(EMPTY_AST);\n\n    babel\n      .parse(debouncedValue, {\n        pluginOptions: debouncedOptions,\n        customParser: debouncedOptions.customParser,\n        version: debouncedOptions.version,\n      })\n      .then(ast => {\n        if (!cancel) {\n          setAst(ast);\n          setError(null);\n        }\n      })\n      .catch(e => {\n        setError(e);\n      });\n    return () => {\n      cancel = true;\n    };\n  }, [debouncedValue, debouncedOptions, setAst, setError]);\n\n  return [value, ast, error, onCodeChange];\n}\n\nexport default App;\n\nfunction useDebounce(value, delay) {\n  const [debounceValue, setDebounceValue] = useState(value);\n  useEffect(() => {\n    const handler = setTimeout(() => {\n      setDebounceValue(value);\n    }, delay);\n    return () => {\n      clearTimeout(handler);\n    };\n  }, [value, setDebounceValue]);\n  return debounceValue;\n}\n\nfunction useMarker() {\n  const [marker, setMarker] = useState(undefined);\n  const setMarkerAt = useCallback(\n    location => {\n      if (location) {\n        const { start, end } = location;\n        setMarker([\n          {\n            startRow: start.line - 1,\n            startCol: start.column,\n            endRow: end.line - 1,\n            endCol: end.column,\n            className: 'highlight-marker',\n            type: 'background',\n          },\n        ]);\n      } else {\n        setMarker([]);\n      }\n    },\n    [setMarker]\n  );\n\n  return [marker, setMarkerAt];\n}\n\nfunction useCursor(ast) {\n  const [cursor, setCursor] = useState([0, 0]);\n  const [selectedAst, setSelectedAst] = useState(null);\n  const [selectedAstPath, setSelectedAstPath] = useState(null);\n  const onCursorChange = useCallback(\n    selection => {\n      setCursor([\n        selection.selectionLead.row + 1,\n        selection.selectionLead.column,\n      ]);\n    },\n    [setCursor]\n  );\n\n  useEffect(() => {\n    const { node, nodePath } = search(cursor, ast);\n    setSelectedAst(node);\n    setSelectedAstPath(nodePath);\n  }, [cursor, ast, setSelectedAst]);\n\n  return [selectedAst, selectedAstPath, onCursorChange];\n}\n\nfunction isNode(node) {\n  return node && node.type && node.loc;\n}\n\nfunction isInRange(cursor, location) {\n  if (!location) return false;\n  const [row, column] = cursor;\n  const { start, end } = location;\n  return (\n    (start.line < row || (start.line === row && start.column <= column)) &&\n    (end.line > row || (end.line === row && end.column >= column))\n  );\n}\n\nfunction search(cursor, ast) {\n  const stack = [ast];\n  const nodePath = [{ node: ast }];\n  let keyPathSoFar = '';\n  while (stack.length) {\n    const node = stack.pop();\n    for (const key in node) {\n      if (isNode(node[key]) && isInRange(cursor, node[key].loc)) {\n        stack.push(node[key]);\n        keyPathSoFar = keyPathSoFar ? `${keyPathSoFar}.${key}` : key;\n        nodePath.push({ key, keyPath: keyPathSoFar, node: node[key] });\n      }\n      if (Array.isArray(node[key])) {\n        for (const item of node[key]) {\n          if (isNode(item) && isInRange(cursor, item.loc)) {\n            stack.push(item);\n            keyPathSoFar = keyPathSoFar ? `${keyPathSoFar}.${key}` : key;\n            nodePath.push({ key, keyPath: keyPathSoFar, node: item });\n          }\n        }\n      }\n    }\n    if (stack.length === 0) {\n      return { node, nodePath };\n    }\n  }\n  return { node: null, nodePath: null };\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"wmyqVrjdc0tU9zQZUhm3L\",\"codeToolbar\":\"v4LbQScNgn0x-jdjEUqQW\",\"codeContainer\":\"C-2c1TUYuh0DGtmJKsID8\",\"astContainer\":\"_16FYGqeOtDx_OWXwTypaLx\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"options\":\"style_options__1_Oc2\",\"drawer\":\"style_drawer__1J-KC\",\"topbar\":\"style_topbar__RCBpg\"};","/* eslint-disable import/no-webpack-loader-syntax */\n\nmodule.exports['7.0.0'] = require('./7.0.0/index.js');\nmodule.exports['7.1.0'] = require('./7.1.0/index.js');\nmodule.exports['7.2.0'] = require('./7.2.0/index.js');\nmodule.exports['7.2.2'] = require('./7.2.2/index.js');\nmodule.exports['7.2.3'] = require('./7.2.3/index.js');\nmodule.exports['7.2.4'] = require('./7.2.4/index.js');\nmodule.exports['7.2.5'] = require('./7.2.5/index.js');\nmodule.exports['7.3.0'] = require('./7.3.0/index.js');\nmodule.exports['7.3.1'] = require('./7.3.1/index.js');\nmodule.exports['7.3.2'] = require('./7.3.2/index.js');\nmodule.exports['7.3.3'] = require('./7.3.3/index.js');\nmodule.exports['7.3.4'] = require('./7.3.4/index.js');\nmodule.exports['7.4.0'] = require('./7.4.0/index.js');\nmodule.exports['7.4.1'] = require('./7.4.1/index.js');\nmodule.exports['7.4.2'] = require('./7.4.2/index.js');\nmodule.exports['7.4.3'] = require('./7.4.3/index.js');\nmodule.exports['7.4.4'] = require('./7.4.4/index.js');\nmodule.exports['7.4.5'] = require('./7.4.5/index.js');\nmodule.exports['7.5.0'] = require('./7.5.0/index.js');\nmodule.exports['7.5.1'] = require('./7.5.1/index.js');\nmodule.exports['7.5.2'] = require('./7.5.2/index.js');\nmodule.exports['7.5.3'] = require('./7.5.3/index.js');\nmodule.exports['7.5.4'] = require('./7.5.4/index.js');\nmodule.exports['7.5.5'] = require('./7.5.5/index.js');\nmodule.exports['7.6.0'] = require('./7.6.0/index.js');\n"],"sourceRoot":""}